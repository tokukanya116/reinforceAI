---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains functionality for adjusting starting villagers for prefab start.
-- Contains functionality to replicate prefab start.
---------------------------------------------------------------------------------------------------

AGS_Empire_War_MODULE = "AGS_Empire_War"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_Empire_War_MODULE)	

--如果没勾选帝国战争模式，将与帝国战争模式的函数注入全部移除
function AGS_Empire_War_UpdateModuleSettings()
	AGS_Print("AGS_Empire_War_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.EnableEmpireWar then
		Core_UnregisterModule(AGS_Empire_War_MODULE)
	end
end

--调用预设置函数
function AGS_Empire_War_PresetExecute()
	AGS_Print("AGS_Empire_War_PresetExecute")
	AGS_Empire_War_AssignUnitsToResources()
end

-- Assign units to resources
function AGS_Empire_War_AssignUnitsToResources()
	local player_civ
	local player_id
	local localPlayer
	local player_town_center_pos
  local player_raceName

  -- 派遣种田
  local function _AssignFarmer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local e_closest_farm = EGroup_GetClosestEntity(eg_farms, Util_GetPosition(sid))
    if e_closest_farm ~= nil then
      EGroup_Single(eg_single, e_closest_farm)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_farms, e_closest_farm)
    else
      print("Could not find farm to assign villager to")
    end
  end
  --派遣吃鱼
  local function _AssignFisherman(gid, idx, sid)
    
    SGroup_Single(sg_single, sid)
    local e_closest_fish = EGroup_GetClosestEntity(eg_shore_fish, Util_GetPosition(sid))
    if e_closest_fish ~= nil then
      EGroup_Single(eg_single, e_closest_fish)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_shore_fish, e_closest_fish)
    else
      print("Could not find fish to assign villager to")
    end
    
  end
  --派遣砍树
  local function _AssignForester(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local entity_tree = EGroup_GetClosestEntity(eg_allWoodResources, Util_GetPosition(sid))
    if entity_tree ~= nil then
      EGroup_Single(eg_single, entity_tree)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_allWoodResources, entity_tree)
    else
      print("Could not find a tree to assign villager to")
    end
    
  end
  --派遣挖矿
  local function _AssignGoldminer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local eg_gold = AGS_GetClosestGoldEntity(player_id, Util_GetPosition(sid), 15)
    
    if eg_gold ~= nil then
      EGroup_Single(eg_single, eg_gold)
      LocalCommand_SquadEntity(player_id, sg_single, SCMD_Gather, eg_single, false)
    end

  end
	
  --派遣采集石料   
  local function _AssignStoneminer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    LocalCommand_SquadEntity(player_id, sg_single, SCMD_Gather, eg_stone_deposit, false)
  end
  --派遣浆果
  local function _AssignGatherer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local e_closest_berry = EGroup_GetClosestEntity(eg_berry_bushes, Util_GetPosition(sid))
    if e_closest_berry ~= nil then
      EGroup_Single(eg_single, e_closest_berry)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_berry_bushes, e_closest_berry)
    else
      print("Could not find berries to assign villager to")
    end
    
  end
  --派遣吃鹿
  local function _AssignHunter(gid, idx, sid)
    
    -- There are no more than 2 deer (alive) within 15 Meters of the drop off
    local eg_close_food_deposits = Misc_FindDepositsOfTypeCloseToPosition(RT_Food,
      Cardinal_ConvertTypeToEntityBlueprint("villager", localPlayer), 
      Squad_GetPosition(sid),
      120)
    
    local genericDeerBp = BP_GetSquadBlueprint("gaia_huntable_deer")
    local sg_deer = SGroup_CreateUnique("")
    
    
    if EGroup_Count(eg_close_food_deposits) ~= 0 then
      for i = 1, EGroup_Count(eg_close_food_deposits), 1 do
        local deposit = EGroup_GetEntityAt(eg_close_food_deposits, i) 
        local deposit_squad = Entity_GetSquad(deposit)
        if deposit_squad ~= nil then
          local squadBP = Squad_GetBlueprint(deposit_squad)
          if squadBP == genericDeerBp then
            SGroup_Add(sg_deer, deposit_squad)
          end
        end
      end
      EGroup_Clear(eg_close_food_deposits)
    end
    
    -- Assign!
    if SGroup_Count(sg_deer) > 0 then
      local sg_targetDeer = SGroup_CreateUnique("")

      SGroup_Single(sg_single, sid)
      local sacrificialDeer = SGroup_GetClosestSquad(sg_deer, Util_GetPosition(sid))
      if sacrificialDeer ~= nil then
        SGroup_Single(sg_targetDeer, sacrificialDeer)
        LocalCommand_SquadSquad(localPlayer, sg_single, SCMD_Gather, sg_targetDeer, false)
      end
    end
    
  end
  --渔船派遣
  local function _AssignFishingboat(gid, idx, sid)
    
    SGroup_Single(sg_single, sid)
    local e_closest_fish = EGroup_GetClosestEntity(eg_deepwater_fish, Util_GetPosition(sid))
    if e_closest_fish ~= nil then
      EGroup_Single(eg_single, e_closest_fish)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_deepwater_fish, e_closest_fish)
    else
      print("Could not find fish to assign villager to")
    end
    
  end
  
	for idx, player in pairs(PLAYERS) do
		
		player_id = player.id
		-- 根据index获取当前轮到的玩家
		--Game_GetLocalPlayer() 不太确定是否能用
		localPlayer = World_GetPlayerAt(idx)
    player_raceName = player.raceName
    
		player_town_center_pos = Entity_GetPosition( EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1))
		
		if not AGS_AI_IsAI(player_id) then 
			--生成矿场建筑
			local gold_mining_camp = AGS_Empire_War_Generate_Building_PreSetting(player_id, localPlayer, "gold_mining_camp", player_town_center_pos)
			
			--生成派发的村民
			local sg_player_goldminer = AGS_Empire_War_Generate_Villager_PreSetting(player_id, localPlayer, "goldminer", Entity_GetPosition(gold_mining_camp))
      
			--遍历执行派遣
			SGroup_ForEach(sg_player_goldminer, _AssignGoldminer)
		end
	end
end

--自动识别类型产出农民并返回农民sgroup
function AGS_Empire_War_Generate_Villager_PreSetting(player_id,localPlayer, use_type, preset_position)
	--空值，报错拦截
	if not player_id then
		return
	end
	if not localPlayer then
		return
	end
	if not use_type then
		return
	end
	if not preset_position then
		preset_position = Entity_GetPosition(EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1))
	end
	
	
	-- 共通参数设置
	--local player_town_center_pos = Entity_GetPosition( EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1))
	local player_civ_prefixes = AGS_GLOBAL_SETTINGS.Prefixes[Player_GetRaceName(localPlayer)] -- 文明后缀 例如 日本 = jpn
	local bp_squad -- 小队蓝图
	local sgroup_name = AGS_SGroupName(player_id, use_type)
	local count
	local position = preset_position
	
	-- 按类型生成的个体参数
	if use_type == "goldminer" then
    bp_squad = BP_GetSquadBlueprint("unit_villager_1_"..player_civ_prefixes)
		count = AGS_EMPIRE_WAR_SQUAD_NUM_TABLE[Player_GetRaceName(localPlayer)]['gold_worker']
	end

	--返回生成的农民实体
	return AGS_SpawnSquad(player_id, sgroup_name, bp_squad, position, nil, count)
end
--自动识别类型选择建筑蓝图并生成，返回建筑entity
function AGS_Empire_War_Generate_Building_PreSetting(player_id, localPlayer, build_type, preset_position)
	--空值，报错拦截
	if not player_id then
		return
	end
	if not localPlayer then
		return
	end
	if not build_type then
		return
	end
	if not preset_position then
		preset_position = Entity_GetPosition( EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1))
	end
	
	local gold_type 
	local gold_entities = EGroup_CreateIfNotFound("gold_mining_camp")
  local player_civ_prefixes = AGS_GLOBAL_SETTINGS.Prefixes[Player_GetRaceName(localPlayer)]

	local build_entity_callback
	
  -- 金矿
	if build_type == "gold_mining_camp" then
		-- 查找周边金矿类型(先查小金，不存在则找大金)
    
    local gold_entity = AGS_GetClosestGoldEntity(player_id, preset_position, 60)
    
    if gold_entity ~= nil then
      --EGroup_Single(eg_single, gold_entity)
      if Entity_HasBlueprint(gold_entity, AGS_GetNeutralEntity(AGS_BP_DEPOSIT_GOLD_SMALL)) then
        gold_type = 'small'
      else
        gold_type = 'big'
      end
      
      local gold_position = Entity_GetPosition(gold_entity)
      -- 设置偏移
      -- 默认大金+标准矿场
      local pos_minecamp = 12.5
      -- 小金+标准矿场
      if gold_type == 'small' then
        pos_minecamp = 10
      end
      --日本的矿场无论大小金都是固定距离(因为 1个地图栅格 有 4实体占位格距离 的 容许机制，即取值在在这个容许范围之内，实体都不会在地图上位移超过1格)
      if player_civ_prefixes == 'jpn' then
        pos_minecamp = 12.5
      end
      
      local center_pos = AGS_CalculateCenterOffset(gold_position, pos_minecamp, 0) 
      build_entity_callback = AGS_SpawnEntity(player_id, "field", AGS_GetCivilizationEntity(Player_GetRaceName(localPlayer), AGS_BP_TC_MINING_CAMP), center_pos, nil, false, true)  
    end
    
	end
	
	return build_entity_callback
end
-- Initialize Additional Starting Units
function ChallengeMission_InitStartingUnits()
  
  -- Get unit blueprints
  local sbp_villager_rus = BP_GetSquadBlueprint("unit_villager_1_rus")
  --local sbp_fishingboat_rus = BP_GetSquadBlueprint("unit_naval_fishing_boat_2_rus")
  local sbp_tradecart_rus = BP_GetSquadBlueprint("unit_trade_cart_rus")
  local sbp_scout_rus = BP_GetSquadBlueprint("unit_scout_1_rus")
  
  --[[ PLAYER UNITS ]]--
  
  -- Create SGroups
  sg_player_farmer = SGroup_CreateIfNotFound("sg_player_farmer")
  sg_player_fisherman = SGroup_CreateIfNotFound("sg_player_fisherman")
  sg_player_forester = SGroup_CreateIfNotFound("sg_player_forester")
  sg_player_goldminer = SGroup_CreateIfNotFound("sg_player_goldminer")
  sg_player_stoneminer = SGroup_CreateIfNotFound("sg_player_stoneminer")
  --sg_player_gatherer = SGroup_CreateIfNotFound("sg_player_gatherer")
  sg_player_hunter = SGroup_CreateIfNotFound("sg_player_hunter")
  sg_player_deer = SGroup_CreateIfNotFound("sg_player_deer")
  sg_player_first_traders = SGroup_CreateIfNotFound("sg_player_first_traders")
  sg_player_second_traders = SGroup_CreateIfNotFound("sg_player_second_traders")
  --sg_player_fishingboat = SGroup_CreateIfNotFound("sg_player_fishingboat")
  
  -- Create EGroups
  eg_player_market = EGroup_CreateIfNotFound("eg_player_market")
  
  -- Spawn units
  UnitEntry_DeploySquads(localPlayer, sg_player_farmer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_first_farmer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_farmer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_second_farmer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_fisherman, {{sbp = sbp_villager_rus, numSquads = 1 }}, mkr_player_fisherman_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_forester, {{sbp = sbp_villager_rus, numSquads = 7 }}, mkr_player_forester_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_goldminer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_goldminer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_stoneminer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_stoneminer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_hunter, {{sbp = sbp_villager_rus, numSquads = 4 }}, mkr_player_hunter_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_deer, {{sbp = BP_GetSquadBlueprint("gaia_huntable_deer"), numSquads = 1 }}, mkr_player_deer_spawn)
  --UnitEntry_DeploySquads(localPlayer, sg_player_gatherer, {{sbp = sbp_villager_rus, numSquads = 3 }}, mkr_player_gatherer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_first_traders, {{sbp = sbp_tradecart_rus, numSquads = 2, creator = eg_player_market}}, mkr_player_trader_spawn1)
  UnitEntry_DeploySquads(localPlayer, sg_player_second_traders, {{sbp = sbp_tradecart_rus, numSquads = 2, creator = eg_player_market}}, mkr_player_trader_spawn2)
  --UnitEntry_DeploySquads(localPlayer, sg_player_fishingboat, {{sbp = sbp_fishingboat_rus, numSquads = 1 }}, mkr_player_fishingboat_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_startingscouts, {{sbp = sbp_scout_rus, numSquads = 1 }}, mkr_player_startingscout_spawn)
  
  -- Spawn minimap icons
  --Util_CreateEntities(nil, eg_minimap, BP_GetEntityBlueprint("gaia_deer_dummy_minimap_icon"), mkr_player_deer_spawn, 1, nil, true, true)
  
end