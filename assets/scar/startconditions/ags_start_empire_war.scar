---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains functionality for adjusting starting villagers for prefab start.
-- Contains functionality to replicate prefab start.
---------------------------------------------------------------------------------------------------

AGS_Empire_War_MODULE = "AGS_Empire_War"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_Empire_War_MODULE)  

--如果没勾选帝国战争模式，将与帝国战争模式的函数注入全部移除
function AGS_Empire_War_UpdateModuleSettings()
  AGS_Print("AGS_Empire_War_UpdateModuleSettings")
  if not AGS_GLOBAL_SETTINGS.EnableEmpireWar then
    Core_UnregisterModule(AGS_Empire_War_MODULE)
  end
end

--调用预设置函数
function AGS_Empire_War_PresetExecute()
  --AGS_Print("AGS_Empire_War_PresetExecute")
  AGS_Empire_War_AssignUnitsToResources()
end

--自动派遣单位采集
function AGS_Empire_War_AssignUnitsToResources()
  local player_civ
  local player_id
  local localPlayer
  local player_town_center_pos
  local TC_CAPITAL
  local player_raceName

  -- 派遣挖矿
  local function _AssignGoldminer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local eg_gold = AGS_GetClosestGoldEntity(player_id, Util_GetPosition(sid), 15)
    
    if eg_gold ~= nil then
      EGroup_Single(eg_single, eg_gold)
      LocalCommand_SquadEntity(player_id, sg_single, SCMD_Gather, eg_single, false)
    else
      print("Could not find gold to assign villager to! 没找到金矿!")
    end

  end
  
  -- 派遣浆果
  local function _AssignGatherBerry(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    
    -- 查找周边浆果类型
    local e_closest_berry = AGS_GetClosestFoodEntity(player_id, 'berry', Util_GetPosition(sid), 15)

    if e_closest_berry ~= nil then
      EGroup_Single(eg_single, e_closest_berry)
      LocalCommand_SquadEntity(player_id, sg_single, SCMD_Gather, eg_single, false)
    else
      print("Could not find berries to assign villager! 没找到浆果!")  
    end
  end
  
  -- 吃羊
  local function _AssignGatherSheep(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    
    -- 查找周边羊类型
    local squad_closest_sheep = AGS_GetClosestFoodEntity(player_id, 'sheep', Util_GetPosition(sid), 15)
    local sgroup_closest_sheep = SGroup_CreateIfNotFound('sgroup_closest_sheep')
    
    if squad_closest_sheep ~= nil then
      SGroup_Add(sgroup_closest_sheep, squad_closest_sheep)
      LocalCommand_SquadSquad(player_id, sg_single, SCMD_Gather, sgroup_closest_sheep, false)
    else
      print("Could not find sheeps to assign villager! 没找到羊!")  
    end
    
    SGroup_Clear(sgroup_closest_sheep)
  end
  
  -- 砍树
  local function _AssignGatherWood(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    
    local wood_entities = EGroup_CreateIfNotFound(AGS_EGroupNeutralName(1, 'wood'))
    -- 查找周边木头类型 
    World_GetEntitiesNearPoint(player_id, wood_entities, Util_GetPosition(sid), 15, OT_Neutral)
    EGroup_Filter(wood_entities, AGS_BP_TREE, FILTER_KEEP)
    local closest_wood = AGS_EGroup_GetClosestEntity(wood_entities, Util_GetPosition(sid))
    
    if closest_wood ~= nil then
      -- 获取最近的树
      EGroup_Single(eg_single, closest_wood)
      LocalCommand_SquadEntity(player_id, sg_single, SCMD_Gather, eg_single, false)
    else
      print("Could not find berries to assign villager! 没找到浆果!")  
    end
  end
  
  for idx, player in pairs(PLAYERS) do
    player_id = player.id
    player_idx = idx
    --if not AGS_AI_IsAI(player_id) then
      --local player_all_sgroups = 
      --删掉所有的预生成，再重新按照民族生成特殊单位
      --杀掉农民和侦察兵还有羊就行，其他都不要动免得需要再生成
      local player_start_sgroup = Player_GetSquads(player_id)
      --优先调整：没找到对应的蓝图，需要修改
      local function get_kill_sgroup(gid, idx, sid)
        if Squad_IsOfType(sid, 'scar_scout') or Squad_IsOfType(sid, 'scar_villager') or Squad_IsOfType(sid, 'scar_sheep') then
          Squad_Destroy(sid)
        end
      end
 
      SGroup_ForEach(player_start_sgroup, get_kill_sgroup)
      
      -- 根据index获取当前轮到的玩家
      --Game_GetLocalPlayer() 不太确定是否能用
      localPlayer = World_GetPlayerAt(idx)
      player_raceName = player.raceName
      
      --要移除掉蒙古的蒙古包
      if player_raceName == 'mongol' then
        local player_start_entities = Player_GetEntities(player_id)
        --EGroup_Filter(player_start_entities, AGS_BP_TC_CAPITAL, FILTER_REMOVE)
   
        local function get_kill_entity(gid, idx, eid)
          if Entity_IsOfType(eid, 'scar_house') then
            Entity_Destroy(eid)
          end
        end
 
        EGroup_ForEach(player_start_entities, get_kill_entity)
      end
      
      TC_CAPITAL =  EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1)
  
      player_town_center_pos = Entity_GetPosition( TC_CAPITAL )
    
        --智慧宫
      if player_raceName == 'abbasid' or player_raceName == 'abbasid_ha_01' then
        local landmark_abb = AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, "landmark_abb", player_town_center_pos, player_building_position_table) 
        player_building_position_table['landmark_abb'] = landmark_abb
      end
      
      --生成采集建筑
      local gold_mining_camp = AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, "gold_mining_camp", player_town_center_pos, player_building_position_table)
      local stone_mining_camp = AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, "stone_mining_camp", player_town_center_pos, player_building_position_table)
      local econ_food = AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, "econ_food", player_town_center_pos, player_building_position_table)
      local econ_wood = AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, "econ_wood", player_town_center_pos, player_building_position_table)
      
      local player_building_position_table = {
        TC_CAPITAL = TC_CAPITAL,
        player_town_center_pos = player_town_center_pos,
        pos_gold_mining_camp = gold_mining_camp ~=nil and Entity_GetPosition(gold_mining_camp) or nil,
        pos_econ_food = econ_food ~=nil and Entity_GetPosition(econ_food) or nil,
        pos_econ_wood = econ_wood ~=nil and Entity_GetPosition(econ_wood) or nil,
        ent_gold_mining_camp = gold_mining_camp ~=nil and gold_mining_camp or nil,
        ent_econ_food = econ_food ~=nil and econ_food or nil,
        ent_econ_wood = econ_wood ~=nil and econ_wood or nil,
        landmark_abb = nil,
        ovoo = nil,
        tc_mon = nil
      }
      
      -- 蒙古(蒙古是直接挪tc到木区的)
      if player_raceName == 'mongol' then
        player_building_position_table['ovoo'] = player_building_position_table['pos_gold_mining_camp']
        player_building_position_table['tc_mon'] = player_building_position_table['pos_econ_wood']
        -- 更新蒙古城镇中心地址
        player_town_center_pos = player_building_position_table['pos_econ_wood']
        --Player_AddResource(player.id, RT_Wood, 50)
      end
      
      -- 额外生成的建筑
      AGS_Empire_War_Extra_Generate_Building_PreSetting(player_id, player_raceName, nil, player_building_position_table)
      --额外生成的单位
      --AGS_Empire_War_Extra_Generate_Sgroup_PreSetting(player_id, player_raceName, player_town_center_pos, player_building_position_table)  
      
      --重设中国文明的采集区
      local gather_sheep_pos =  World_Pos(player_town_center_pos.x-5, 0, player_town_center_pos.z-7.5)
      if player_raceName == 'chinese' or player_raceName == 'chinese_ha_01' then
        gather_sheep_pos = player_building_position_table['pos_econ_food']
      end
      
      -- 生成的羊
      local sg_player_resource_food_sheep = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "econ_food_resource_sheep", 'resource', gather_sheep_pos, true)
      
      
      --生成派发的村民
      local sg_player_goldminer = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "econ_gold", 'worker', player_building_position_table['pos_gold_mining_camp'], true)
      local sg_player_econ_food_sheep = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "econ_food_sheep", 'worker', gather_sheep_pos, true)
      local sg_player_econ_food_berry = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "econ_food_berry", 'worker', player_building_position_table['pos_econ_food'], true)
      local sg_player_econ_wood = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "econ_wood", 'worker', player_building_position_table['pos_econ_wood'], true)
      
      --local sg_player_start_sgroup = AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "extra", 'start_sgroup', player_building_position_table)
      
      --侦察兵
      AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "extra", 'scout',  World_Pos(player_town_center_pos.x-8, 0, player_town_center_pos.z-8))
      local sg_player_start_official = nil
      if player_raceName == 'chinese' or player_raceName == 'chinese_ha_01' then
        AGS_Empire_War_Generate_Sgroup_PreSetting(player_id, player_raceName, "extra", 'official', player_building_position_table)
      end
      
      --遍历执行派遣
      if sg_player_goldminer ~= nil then 
        SGroup_ForEach(sg_player_goldminer, _AssignGoldminer)
      end
      if sg_player_econ_food_sheep ~= nil then
        SGroup_ForEach(sg_player_econ_food_sheep, _AssignGatherSheep)
      end
      if sg_player_econ_food_berry ~= nil then
        SGroup_ForEach(sg_player_econ_food_berry, _AssignGatherBerry)
      end
      if sg_player_econ_wood ~= nil then
        SGroup_ForEach(sg_player_econ_wood, _AssignGatherWood)
      end
      
    --end
  end
end

--自动识别sbp类型并返回sgroup
function AGS_Empire_War_Generate_Sgroup_PreSetting(player_id,player_raceName, use_type, sbp_type_suffix, preset_position, need_back)
  --空值，报错拦截
  if not player_id then
    return
  end
  if not player_raceName then
    return
  end
  if not use_type then
    return
  end
  if not preset_position then
    preset_position = Entity_GetPosition(EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL),1))
  end
  if not sbp_type_suffix then
    sbp_type_suffix = ''
  end
  if not need_back then
    need_back = false
  end
  
  
  local player_civ_prefixes = AGS_GLOBAL_SETTINGS.Prefixes[player_raceName]
  local bp_squad -- 小队蓝图
  local sgroup_name = AGS_SGroupName(player_id, use_type)
  local count
  local position = preset_position
  
  -- 按类型生成的个体参数
  if sbp_type_suffix == "worker" then
    bp_squad = BP_GetSquadBlueprint("unit_villager_1_"..player_civ_prefixes)
    count = AGS_EMPIRE_WAR_SQUAD_NUM_TABLE[player_raceName][tostring(use_type) .."_".. sbp_type_suffix]
  elseif sbp_type_suffix == "resource" then
    if use_type == 'econ_food_resource_sheep' then
      bp_squad = AGS_GetNeutralUnit(AGS_BP_SHEEP)
      count = 5
    end
  elseif use_type == 'extra' then
    if sbp_type_suffix == 'scout' then
      bp_squad = BP_GetSquadBlueprint("unit_scout_1_"..player_civ_prefixes)
      count = AGS_EMPIRE_WAR_SQUAD_NUM_TABLE[player_raceName]['scout']
      AGS_SpawnSquad(player_id, sgroup_name, bp_squad, position, nil, count)
      return
    end
    if sbp_type_suffix == 'official' then
      --因为这里的地址被替换成了地址表，所以要单独取出 position['...'] 这样 
      bp_squad = BP_GetSquadBlueprint("unit_official_1_"..player_civ_prefixes)
      count = AGS_EMPIRE_WAR_SQUAD_NUM_TABLE[player_raceName]['scout']
      -- 监督
      local bp_supervise = BP_GetAbilityBlueprint('official_supervise_building_target_chi')
      local official_food = AGS_SpawnSquad(player_id, sgroup_name..'_food', bp_squad, position['pos_econ_food'], nil, 1)
      local official_gold = AGS_SpawnSquad(player_id, sgroup_name.."_gold", bp_squad, position['pos_gold_mining_camp'], nil, 1)
      
      local player_entities = Player_GetEntities(player_id)
      
      -- 遍历查找需要监督的建筑
      local function supervise(gid,idx,eid)
        EGroup_Single(eg_single, eid)
        
        if eid['EntityID'] == position['ent_econ_food']['EntityID'] then
          LocalCommand_SquadEntityAbility(player_id, official_food, eg_single, bp_supervise, true, false)
        elseif  eid['EntityID'] == position['ent_gold_mining_camp']['EntityID'] then
          LocalCommand_SquadEntityAbility(player_id, official_gold, eg_single, bp_supervise, true, false)
        else
        end
      end
      
      EGroup_ForEach(player_entities, supervise)
    end
  else
    
  end
  
  --返回生成的队伍成员
  if need_back and use_type ~= 'extra' then
    return AGS_SpawnSquad(player_id, sgroup_name, bp_squad, position, nil, count)
  end
end

--自动识别类型选择建筑蓝图并生成，返回建筑entity
function AGS_Empire_War_Generate_Building_PreSetting(player_id, player_raceName, build_type, preset_position, player_building_position_table)
  --空值，报错拦截
  if not player_id then
    return
  end
  if not player_raceName then
    return
  end
  if not build_type then
    return
  end
  if not preset_position then
    preset_position = player_building_position_table['player_town_center_pos']
  end
  
  local player_civ_prefixes = AGS_GLOBAL_SETTINGS.Prefixes[player_raceName]
  local distance = 80
  
  local build_entity_callback
  
  -- 金矿
  if build_type == "gold_mining_camp" then
    local gold_type 
    local gold_entities = EGroup_CreateIfNotFound(build_type)
    
    -- 查找周边金矿类型(先查小金，不存在则找大金)
    
    local gold_entity = AGS_GetClosestGoldEntity(player_id, preset_position, distance)
    
    if gold_entity ~= nil then
      if Entity_HasBlueprint(gold_entity, AGS_GetNeutralEntity(AGS_BP_DEPOSIT_GOLD_SMALL)) then
        gold_type = 'small'
      else
        gold_type = 'big'
      end
      
      local gold_position = Entity_GetPosition(gold_entity)
      -- 设置偏移
      -- 默认大金+标准矿场
      local pos_minecamp = 12.5
      -- 小金+标准矿场
      if gold_type == 'small' then
        pos_minecamp = 10
      end
      --日本的矿场无论大小金都是固定距离(因为 1个地图栅格 有 4实体占位格距离 的 容许机制，即取值在在这个容许范围之内，实体都不会在地图上位移超过1格)
      if player_civ_prefixes == 'jpn' then
        pos_minecamp = 12.5
      end
      
      if gold_type == 'big' and player_civ_prefixes ~= 'jpn' then
        pos_offset = 5
      else
        pos_offset = 0
      end
      
      --马里的露天矿区
      if player_civ_prefixes == 'mal' then
        local open_pit_type = ''
        if gold_type == 'small' then
          open_pit_type = '_small'
        end
        
        AGS_SpawnEntity(player_id, 'open_pit_mine', BP_GetEntityBlueprint('building_open_pit_mine'..open_pit_type..'_mal'), gold_position, nil, false, false)  
      end
      
      local center_pos = AGS_CalculateCenterOffset(gold_position, pos_minecamp, pos_offset) 
      build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id,AGS_BP_MINING_CAMP), AGS_GetCivilizationEntity(player_raceName, AGS_BP_MINING_CAMP), center_pos, nil, false, true)  
    end
  end
  
  -- 磨坊
  if build_type == "econ_food" then
    if player_raceName == 'mongol' then
      build_entity_callback = nil
    end
      
    --local forag_bush_entities = EGroup_CreateIfNotFound(AGS_EGroupNeutralName(1, AGS_BP_DEPOSIT_FOOD))
    -- 查找周边浆果类型
    --World_GetEntitiesNearPoint(player_id, forag_bush_entities, preset_position, distance, OT_Neutral)
    --EGroup_Filter(forag_bush_entities, AGS_GetNeutralEntity(AGS_BP_DEPOSIT_FOOD), FILTER_KEEP)
    
    --local forag_bush_entity = AGS_EGroup_GetClosestEntity(forag_bush_entities, preset_position)
    local forag_bush_entity = AGS_GetClosestFoodEntity(player_id, 'berry', preset_position, distance)
    
    if forag_bush_entity ~= nil then
      
      local try_near_pos = Util_GetPositionFromAtoB(Entity_GetPosition(forag_bush_entity), preset_position, 7.5)
      
      build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id, AGS_BP_ECOM_FOOD), AGS_GetCivilizationEntity(player_raceName, AGS_BP_ECOM_FOOD), AGS_CalculateCenterOffset(try_near_pos, 0, 0) , nil, false, true)  
    end
  end
  
  --石矿
  if build_type == "stone_mining_camp" then
    local stone_type
    -- 查找周边金矿类型(石料)
    distance = 120
    local stone_entities = EGroup_CreateIfNotFound(AGS_EGroupNeutralName(1, AGS_BP_DEPOSIT_STONE))
    -- 查找周边石头类型
    World_GetEntitiesNearPoint(player_id, stone_entities, preset_position, distance, OT_Neutral)
    EGroup_Filter(stone_entities, AGS_GetNeutralEntity(AGS_BP_DEPOSIT_STONE_SMALL), FILTER_KEEP)
    
    local stone_entity = AGS_EGroup_GetClosestEntity(stone_entities, preset_position)
    
    if stone_entity ~= nil then
      
      --判断是大石料还是小石料
      --if Entity_HasBlueprint(stone_entity, AGS_GetNeutralEntity(AGS_BP_DEPOSIT_STONE_SMALL)) then
        --stone_type = 'small'
      --else
        --stone_type = 'big'
      --end
      
     
      local stone_position = Entity_GetPosition(stone_entity)
      local center_pos = AGS_CalculateCenterOffset(stone_position, 0, 0) 
      --蒙古
      if player_raceName == 'mongol' then
        --local ovoo_type = stone_type == 'small' and 'ovoo_small' or 'ovoo_large'
        local ovoo_type = 'ovoo_small'
        build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id,'ovoo_mon'), AGS_GetCivilizationEntity(player_raceName, ovoo_type), center_pos, nil, false, false)
      else 
        --其他人
        -- 设置偏移
        -- 默认小石头+标准矿场
        local pos_minecamp = 10

        --日本的矿场无论大小金都是固定距离(因为 1个地图栅格 有 4实体占位格距离 的 容许机制，即取值在在这个容许范围之内，实体都不会在地图上位移超过1格)
        if player_civ_prefixes == 'jpn' then
          pos_minecamp = 12.5
        end
        
        local center_pos = AGS_CalculateCenterOffset(stone_position, pos_minecamp, 0) 
        build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id,'stone'..AGS_BP_MINING_CAMP), AGS_GetCivilizationEntity(player_raceName, AGS_BP_MINING_CAMP), center_pos, nil, false, true)  
      end
      
    end

  end

  -- 木头
  if build_type == "econ_wood" then
    distance = 50
    local wood_entities = EGroup_CreateIfNotFound(AGS_EGroupNeutralName(1, 'wood'))
    -- 查找周边木头类型
    World_GetEntitiesNearPoint(player_id, wood_entities, preset_position, distance, OT_Neutral)
    EGroup_Filter( wood_entities, AGS_BP_TREE, FILTER_KEEP)
    local TC = EGroup_GetEntityAt(Player_GetEntitiesFromType(player_id, AGS_BP_TC_CAPITAL), 1)
    
    local function findTheNearestForestPosition(gid, idx, eid)
      -- 玩家出生点距离30以上必定是树林
      -- 只要把距离过近的删除，剩下的一定是树林，取第一个生成伐木场就行
      if eid ~= nil and Util_GetDistance(eid, TC) <= 30 then
        EGroup_Remove(wood_entities ,eid)
        --if Entity_IsOfType(eid, AGS_BP_TREE) == 
        --Util_GetPositionFromAtoB( MarkerID/Pos a, MarkerID/Pos b, Real distance ) --尝试返回一个从a向b出发，距离多少的点
      end  
    end
    
    EGroup_ForEach(wood_entities, findTheNearestForestPosition)
    
    if wood_entities ~= nil then
      -- 获取最近城镇中心的树
      local pos_econ_wood = Entity_GetPosition(AGS_EGroup_GetClosestEntity(wood_entities, preset_position))
      local try_near_pos = Util_GetPositionFromAtoB(pos_econ_wood, preset_position, 5)
      local center_pos = AGS_CalculateCenterOffset(try_near_pos, 0, 0) 
      
      if player_raceName == 'mongol' then
        Entity_Destroy(TC)
        try_near_pos = Util_GetPositionFromAtoB(pos_econ_wood, preset_position, 12.5)
        center_pos = AGS_CalculateCenterOffset(try_near_pos, 0, 0)
        --Entity_WarpToPos(TC, Util_GetPositionFromAtoB(pos_econ_wood, preset_position, 12.5))
        build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id, AGS_BP_TC_CAPITAL), AGS_GetCivilizationEntity(player_raceName, AGS_BP_TC_CAPITAL), center_pos, nil, false, true)
      else
        build_entity_callback = AGS_SpawnEntity(player_id, AGS_EGroupName(player_id, AGS_BP_ECOM_WOOD), AGS_GetCivilizationEntity(player_raceName, AGS_BP_ECOM_WOOD), center_pos, nil, false, true)
      end  
    end
  end
  
  --智慧宫
  if build_type == "landmark_abb" then
    local landmark_abb_pos = AGS_GetAvailablePosition(player_id, player_building_position_table['TC_CAPITAL'], 'ent', nil, 20, true ) 
    build_entity_callback = AGS_SpawnEntity(player_id, 'landmark_abb', AGS_GetCivilizationEntity(player_raceName, 'landmark_abb'), landmark_abb_pos, nil, false, true)  
  end
  
  return build_entity_callback
end

--其他额外建筑
function AGS_Empire_War_Extra_Generate_Building_PreSetting(player_id, player_raceName, preset_position, player_building_position_table)
  --空值，报错拦截
  if not player_id then
    return
  end
  if not player_raceName then
    return
  end
  if not preset_position then
    preset_position = player_building_position_table['player_town_center_pos']
  end
  if not player_building_position_table then
    return
  end
  
  local build_entities = EGroup_CreateIfNotFound('build_entities')
  local raceName = player_raceName
  local back_pos
 
  for build_type, build_num in pairs(AGS_EMPIRE_WAR_ENTITY_NUM_TABLE[raceName]) do
    local build_ebp = AGS_GetCivilizationEntity(raceName, build_type)
    
    -- 联通电信的村庄
    if build_type == 'build_village' then
      --back_pos = player_building_position_table['pos_gold_mining_camp']
      back_pos = AGS_Building_GetSpawnPosition(player_building_position_table['ent_gold_mining_camp'], nil, 5)
      AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, back_pos)
      
      local great_wall_blueprint = AGS_GetCivilizationEntity(raceName, 'landmark_defense_age3')
      local pos_end = AGS_Building_GetSpawnPosition( player_building_position_table['TC_CAPITAL'], OFFSET_BACK, 20)
      AGS_SpawnEntity(player_id, 'build_entities', great_wall_blueprint, pos_end, nil, false, true)
    end
    
    --拜占庭蓄水池
    if build_type == 'cistern' then
      --水池 应当部署在金矿，朝向磨坊
      back_pos = World_GetOffsetPositionRelativeToFacingTarget(player_building_position_table['pos_gold_mining_camp'], player_building_position_table['pos_econ_food'], 15)
      --position = AGS_GetAvailablePosition(player_id, player_building_position_table['ent_econ_food'], 'ent', nil, 15, true )
      AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, back_pos)
    end
    
    --罗斯哨塔+狩猎小屋
    --wodden_fort
    --hunting_cabin
    if build_type == 'wodden_fort' then
      --应当部署在伐木场旁边
      back_pos = AGS_Building_GetSpawnPosition(player_building_position_table['ent_econ_wood'], OFFSET_FRONT, 0)
      AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, back_pos)
    end  
    
    if build_type == 'hunting_cabin' then
      --应当部署在伐木场旁边
      
      back_pos = AGS_Building_GetSpawnPosition(player_building_position_table['ent_econ_wood'], OFFSET_BACK, 0)
      --position = AGS_GetAvailablePosition(player_id, player_building_position_table['ent_econ_food'], 'ent', nil, 15, true )
      AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, back_pos)
    end  
    
     if build_type == 'monastery' then
      --清真寺 应当部署在磨坊，朝向伐木场
      AGS_GetSafeSpawnPositionByEPB(player_id, ebp, position )
      back_pos = World_GetOffsetPositionRelativeToFacingTarget(player_building_position_table['pos_econ_food'], player_building_position_table['pos_econ_wood'], 0)
      --position = AGS_GetAvailablePosition(player_id, player_building_position_table['ent_econ_food'], 'ent', nil, 15, true )
      AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, back_pos)
    end 
    
    -- 房屋
    if build_type == 'house' then
      -- 用于接收返回的建筑实体(一般返回第一个建筑用于定位)
      local back_ent
      
      for i = 1, build_num do     
        -- 除蒙古外的文明
        if raceName == 'mongol' then
          return
        end
        
        --阿巴斯 需要黄金时代
        if raceName == 'abbasid' or raceName == 'abbasid_ha_01' then
          local landmark_abb = player_building_position_table['landmark_abb']
          local corners_pos --四个角的定位
          local next_pos_offset -- i+1
          local last_pos_offset -- i+2
          ----OFFSET_FRONT,
          ----OFFSET_BACK,
          ----OFFSET_LEFT,
          ----OFFSET_RIGHT,
          ----OFFSET_FRONT_LEFT,
          ----OFFSET_BACK_LEFT,
          ----OFFSET_FRONT_RIGHT,
          ----OFFSET_BACK_RIGHT,
          --end
          --懒的适配（先实现吧）
          if i == 1 then
            current_pos = AGS_Building_GetSpawnPosition( landmark_abb, OFFSET_FRONT_LEFT, 10)
            next_pos_offset = OFFSET_RIGHT
            last_pos_offset = OFFSET_BACK
          end
          if i == 4 then
            current_pos = AGS_Building_GetSpawnPosition( landmark_abb, OFFSET_BACK_LEFT, 10 )
            next_pos_offset = OFFSET_RIGHT
            last_pos_offset = OFFSET_FRONT
          end
          if i == 7 then
            current_pos = AGS_Building_GetSpawnPosition( landmark_abb, OFFSET_FRONT_RIGHT, 10 )
            next_pos_offset = OFFSET_LEFT
            last_pos_offset = OFFSET_BACK
          end
          if i == 10 then
            current_pos = AGS_Building_GetSpawnPosition( landmark_abb, OFFSET_BACK_RIGHT, 10 )
            --next_pos_offset = OFFSET_RIGHT
            --last_pos_offset = OFFSET_FRONT
          end
          
          --四个角都可以看做是第一个建筑
          if i == 1 or i == 4 or i == 7 or i == 10 then
            -- step 不能为 1(因为要占据4个角)
            back_ent = AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, 1, current_pos)
            if i ~= 10 then
              AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, i+1, nil, back_ent, next_pos_offset)
              AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, i+2, nil, back_ent, last_pos_offset)
            end
          end
          
          --return 会终止部分生成
          --return 
          
        --马里露天金矿  
        elseif raceName == 'malian' then
      
        --其他
        --日本排列不需要动，所以只需要改变定位为磨坊就可以了
        else
          
          if i == 1 then
            --根据城镇中心找第一个可用 地址区域 并生成
            local position 
            if raceName == 'japanese' then
              position = AGS_GetAvailablePosition(player_id, player_building_position_table['ent_econ_food'], 'ent', nil, 0, true )
            else
              position = AGS_GetAvailablePosition(player_id, player_building_position_table['TC_CAPITAL'], 'ent', nil, 10, true )
            end
            back_ent = AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, i, position) 
          else
            back_ent = AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, build_ebp, i, nil, back_ent)
          end
          
        end
    
      end
    end
  
     -- 尝试石墙(毫无作用！！！石墙本体无论是直接spawn还是槽位构造，都无法生成)
    if build_type == 'great_wall' then
      -- 用于接收返回的建筑实体(一般返回第一个建筑用于定位)
      local back_ent
      

      if raceName == 'mongol' then
        return
      end
      
      --local great_wall_blueprint = AGS_GetCivilizationEntity(raceName, 'landmark_defense_age3')
      
      ----if player.raceName == AGS_CIV_CHINESE then
      --local stone_wall_blueprint = AGS_GetCivilizationEntity(raceName, 'landmark_defense_age3')
      ----local stone_wall_blueprint2 = BP_GetSlotItemBlueprint('building_defense_wall_chi')
      --local stone_wall_bastion_blueprint = AGS_GetCivilizationEntity(raceName, AGS_BP_ANY_BASTION)
      --local stone_wall_gate_blueprint = AGS_GetCivilizationEntity(raceName, AGS_BP_ANY_GATE)
      ----local spawn_position = AGS_Starts_GetStartPosition(player.id)      
      ----AGS_Fortified_WallAroundPosition(player, palisade_blueprint, palisade_gate_blueprint, spawn_position)
      ----end   
      
      --local bp_squad = BP_GetSquadBlueprint("unit_villager_1_chi")
      --local pos_start = AGS_Building_GetSpawnPosition( player_building_position_table['TC_CAPITAL'], OFFSET_FRONT, 10)
       --local great_wall_blueprint = AGS_GetCivilizationEntity(raceName, 'landmark_defense_age3')
      --local pos_end = AGS_Building_GetSpawnPosition( player_building_position_table['TC_CAPITAL'], OFFSET_BACK, 20)
      --AGS_SpawnEntity(player_id, 'build_entities', great_wall_blueprint, pos_end, nil, false, true)
      --local sss = AGS_SpawnSquad(player_id, "wall_worker", bp_squad, pos_start, nil, 1)
      --LocalCommand_PlayerSquadConstructSlottedSpline(player_id, sss, stone_wall_blueprint,pos_start, pos_end, false)
    end
    
  end 
end


-- 所有的建筑排列都在此生成
function AGS_Empire_War_FindSpawnPositionAndSoftBuilding(player_id, ebp, step, position, back_ent, offset)
  if not player_id then
    return
  end

  if not step then
    return
  end
    
  if not offset then
    offset = nil
  end
    
  local build_entity_callback

  if step ~= 1 then
    position = AGS_Building_GetSpawnPosition( back_ent, offset )
  end
  
  --倒数第二个参数为true会出现建筑物虚影但不会立马构造 --有个缺陷（需要考虑的东西太多，虽然很方便）
  --Util_CreateEntities(player_id, egroupid, ebp, safe_spawn, 1, rotation, true, false, false)
  build_entity_callback = AGS_SpawnEntity(player_id, 'build_entities', ebp, position, nil, false, true)   
  
  return build_entity_callback
end