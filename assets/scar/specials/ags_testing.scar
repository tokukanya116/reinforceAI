---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Enables testing and cheating functionality. WIP.
---------------------------------------------------------------------------------------------------

AGS_TESTING_MODULE = "AGS_Testing"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_TESTING_MODULE)	

function AGS_Testing_UpdateModuleSettings()
	AGS_Print("AGS_Testing_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.IsTestMode then
		Core_UnregisterModule(AGS_TESTING_MODULE)
	end
end

function AGS_Testing_OnPlay()
	for _, player in pairs(PLAYERS) do
		--AGS_Print(player.id, player.raceName)
    if player.raceName == 'chinese' then
      AGS_Testing_CreateWalls()  
    end
	end
  Rule_AddOneShot(AGS_Testing_Delay, 300)
end		

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
function AGS_Testing_Delay()
  --Rule_AddInterval(AGS_Testing_RemoveEntities, 900)
  Rule_AddInterval(AGS_Testing_RemoveUnits, 720)
end

function AGS_Testing_RemoveGaia()
	local egroup = EGroup_CreateUnique()
	World_GetAllNeutralEntities(egroup)
	EGroup_Filter(egroup, "animal", FILTER_KEEP)
	EGroup_DestroyAllEntities(egroup)    		
	EGroup_Destroy(egroup)
end

--优先调整：30分钟后删掉ai多余的伐木场，矿场，铁匠铺，大学
-- 清空可能会导致单位卡顿的单位
function AGS_Testing_RemoveUnits()
  if AGS_GLOBAL_SETTINGS.MaximumPopulation < 275 then
    return
  end
  
	for _, player in pairs(PLAYERS) do
    if AI_IsAIPlayer(player.id) then
      if Player_IsAlive(player.id)  then
        -- 冲车，叉叉，步弓，肉马
        local sgroup_without_gatherer = SGroup_CreateIfNotFound('ai'..tostring(player.id)..'filter_sg')
        local player_all_sgroups = Player_GetSquads(player.id)
        local player_civ_prefixes = AGS_GLOBAL_SETTINGS.Prefixes[player.raceName] 
        bp_squad = BP_GetSquadBlueprint("unit_villager_1_"..player_civ_prefixes)
        --SGroup_Filter(farm,,AGS_GetCivilizationUnit(AGS_BP_VILLAGER),player_all_sgroups)
        SGroup_Filter(player_all_sgroups, bp_squad, FILTER_REMOVE , sgroup_without_gatherer)
        SGroup_Kill(player_all_sgroups)
      end
    end
  end
end

function AGS_Testing_RemoveEntities()
  for _, player in pairs(PLAYERS) do
    if AI_IsAIPlayer(player.id) then
      if Player_IsAlive(player.id)  then
        -- 冲车，叉叉，步弓，肉马
        local egroup_without_gatherer = EGroup_CreateIfNotFound('ai'..tostring(player.id)..'filter_eg')
        local player_all_egroups = Player_GetEntities(player.id)

        bp_entities = AGS_GetCivilizationEntity(player.raceName, AGS_BP_ECOM_WOOD)
        EGroup_Filter(player_all_egroups, bp_entities, FILTER_REMOVE, egroup_without_gatherer)
        EGroup_Kill(egroup_without_gatherer)
      end
    end
  end
end

-- Returns option from command line like "-cheat" by asking for "cheat"
function AGS_Testing_HasCommandLineOption(option_name)
	return Misc_IsCommandLineOptionSet(option_name)
end

function AGS_Testing_SpawnTest()
	for i, player in pairs(PLAYERS) do
		local player_civ = player.raceName
		
		local snameSHP = AGS_SGroupName(player.id, "danes")
		local sbp_shp = BP_GetSquadBlueprint("unit_raider_dane")
		local sg_shp = AGS_SpawnSquad(player.id, snameSHP, sbp_shp, nil, World_Pos(-10, 0, -10), 5)
		local sbp_shp = BP_GetSquadBlueprint("unit_militia_1_rus")
		local sbp_shp = BP_GetSquadBlueprint("unit_great_trebuchet_cmp_mon")
		local sbp_shp = BP_GetSquadBlueprint("unit_landsknecht_mercenary_3_hre_cmp")
		local sbp_shp = BP_GetSquadBlueprint("unit_shield_villager_cmp_fre")
		local sbp_shp = BP_GetSquadBlueprint("unit_supply_cart_eng")
		local sbp_shp = BP_GetSquadBlueprint("unit_foot_knight_2_cmp_eng")
		local sbp_shp = BP_GetSquadBlueprint("unit_shield_villager_cmp_eng")
		local sbp_shp = BP_GetSquadBlueprint("unit_shieldwall_hastings_cmp_eng")
		local sbp_shp = BP_GetSquadBlueprint("unit_supply_cart_chi")
		local sbp_shp = BP_GetSquadBlueprint("unit_militia_cmp_chi")
	end
end

AGS_TESTING_CORNERS = {
  LeftTop = { x = 60, z = 60 },
  RightTop = { x = 60, z = -60 },
  RightBot = { x = -60, z = -60 },
  LeftBot = { x = -60, z = 60 },
  LeftTopStep = { x = 0, z = -1 },
  RightTopStep = { x = -1, z = 0 },
  RightBotStep = { x = 0, z = 1 },
  LeftBotStep = { x = 1, z = 0 },
  WallLength = 120, -- Determined by this table, too lazy to make it completely dynamic.
  StepCount = 12, -- Equals WallLength/StepSize.
  StepSize = 10,
  GateMiddleTop = { x = 60, z = 0 },
  GateMiddleBot = { x = -60, z = 0 },
  GateMiddleRight = { x = 0, z = -60 },
  GateMiddleLeft = { x = 0, z = 60 },
}

-- 石墙生成有点问题，所以仅能测试
function AGS_Testing_CreateWalls()
  for _, player in pairs(PLAYERS) do
    if player.raceName ~= AGS_CIV_MONGOL then
      local palisade_blueprint = AGS_GetCivilizationEntity(player.raceName, AGS_BP_ANY_WALL)
      local palisade_gate_blueprint = AGS_GetCivilizationEntity(player.raceName, AGS_BP_ANY_GATE)
      local spawn_position = AGS_Starts_GetStartPosition(player.id)      
      AGS_Testing_WallAroundPosition(player, palisade_blueprint, palisade_gate_blueprint, spawn_position)
    end    
  end  
end

function AGS_Testing_WallAroundPosition(player, wall_bp, gate_bp, center_position)
  -- New vars
  local step_size = AGS_TESTING_CORNERS.StepSize
  local step_count = AGS_TESTING_CORNERS.StepCount
  -- Wall helper funcs
  local AGS_Testing_Wall = function(idx_end, corner, step)
    local start_at = World_Pos(0, 0, 0)
    local close_at = World_Pos(0, 0, 0)
    start_at = AGS_Testing_StartCoordinates(center_position, corner)
    for i=1, idx_end do 
      close_at = AGS_Testing_AdjustCoordinates(start_at, step, step_size)
      LocalCommand_PlayerPlaceAndConstructSlottedSplinePlanned(player.id, wall_bp, start_at, close_at, false, false)
      start_at = close_at
    end
  end
  local AGS_Testing_Construct = function(gid, idx, eid)
    Entity_ForceSelfConstruct(eid)
  end
  --local AGS_Testing_Gate = function(corner, x_off, z_off)
  --  local start_at = AGS_Testing_StartCoordinates(center_position, corner)
  --  local face_at = AGS_CalculateCenterOffset(start_at, x_off, z_off)
  --  LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player.id, gate_bp, start_at, face_at, false, false)
  --end
  -- left top corner
  AGS_Testing_Wall(step_count, AGS_TESTING_CORNERS.LeftTop, AGS_TESTING_CORNERS.LeftTopStep)
  -- right top corner
  --AGS_Testing_Wall(step_count, AGS_TESTING_CORNERS.RightTop, AGS_TESTING_CORNERS.RightTopStep)
  -- right bot corner
  --AGS_Testing_Wall(step_count, AGS_TESTING_CORNERS.RightBot, AGS_TESTING_CORNERS.RightBotStep)
  -- left bot corner
  --AGS_Testing_Wall(step_count, AGS_TESTING_CORNERS.LeftBot, AGS_TESTING_CORNERS.LeftBotStep)
  -- construct 
  local walls = Player_GetEntitiesFromType(player.id, AGS_BP_ANY_WALL)
  EGroup_ForEach(walls, AGS_Testing_Construct)
  
  -- middle top
  --AGS_Testing_Gate(AGS_TESTING_CORNERS.GateMiddleTop, 10, 0)
  -- middle bot
  --AGS_Testing_Gate(AGS_TESTING_CORNERS.GateMiddleBot, 10, 0)
  -- middle right
  --AGS_Testing_Gate(AGS_TESTING_CORNERS.GateMiddleRight, 0, 10)
  -- middle left
  --AGS_Testing_Gate(AGS_TESTING_CORNERS.GateMiddleLeft, 0, 10)
  -- construct
  --local gates = Player_GetEntitiesFromType(player.id, AGS_BP_ANY_GATE)
  --EGroup_ForEach(gates, AGS_Testing_Construct)
end


function AGS_Testing_StartCoordinates(spawn, corner)
  -- start corner coordinates
  local x_str = spawn.x + corner.x
  local z_str = spawn.z + corner.z
  return World_Pos(x_str, World_GetHeightAt(x_str, z_str), z_str)
end

function AGS_Testing_AdjustCoordinates(start, step, step_size)
  local x_end = start.x + step.x * step_size
  local z_end = start.z + step.z * step_size  
  return World_Pos(x_end, World_GetHeightAt(x_end, z_end), z_end)
end