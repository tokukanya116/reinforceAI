---------------------------------------------------------------------------------------------------
-- 作者:
-- Woprock
-- 译者：
-- 雾隐kagari
-- 以下基于Woprock的基础版修改汉化
--
-- 描述:
-- 包含所有选项定义及其当前值.
-- 可被任何其他脚本引用.
-- 在整个游戏过程中允许直接调用.
-- 全局变量和公共脚本
---------------------------------------------------------------------------------------------------
-- CONSTANTS(常量)
---------------------------------------------------------------------------------------------------
-- Team Victory(团队胜利)
AGS_GS_TEAM_VICTORY_FFA = 0
AGS_GS_TEAM_VICTORY_STANDARD = 1
AGS_GS_TEAM_VICTORY_DYNAMIC = 2
-- Settlements(游戏模式)
AGS_GS_SETTLEMENT_SCATTERED = 0
AGS_GS_SETTLEMENT_NOMADIC = 1
AGS_GS_SETTLEMENT_SETTLED = 2
AGS_GS_SETTLEMENT_FORTIFIED = 3
AGS_GS_SETTLEMENT_PILGRIMS = 4
-- Team Balance(团队平衡)
AGS_GS_TEAM_BALANCE_NONE = 0
AGS_GS_TEAM_BALANCE_POPULATION = 1
AGS_GS_TEAM_BALANCE_RESOURCES = 2
-- Wonder(奇观)
AGS_GS_WONDER_SCALE_COST_DISABLED = -1
-- Team Vision(盟友设置 0：无队友 1：可重新设置 2：盟友不可变)
AGS_GS_TEAM_VISION_NONE = 0
AGS_GS_TEAM_VISION_REQUIRES_MARKET = 1
AGS_GS_TEAM_VISION_ALWAYS = 2
-- Map Vision(地图设置 0：迷雾 1：已探索 2：全图视野)
AGS_GS_MAP_VISION_CONCEALED = 0
AGS_GS_MAP_VISION_EXPLORED = 1
AGS_GS_MAP_VISION_REVEALED = 2
-- Ages(开局时代)
AGS_GS_AGE_NONE = 0
AGS_GS_AGE_DARK = 1
AGS_GS_AGE_FEUDAL = 2
AGS_GS_AGE_CASTLE = 3
AGS_GS_AGE_IMPERIAL = 4
AGS_GS_AGE_LATE_IMPERIAL = 5
-- Resources(开局玩家资源数量：分别对应多个资源等级)
AGS_GS_RESOURCES_NONE = 0
AGS_GS_RESOURCES_LOW = 1
AGS_GS_RESOURCES_NORMAL = 2
AGS_GS_RESOURCES_MEDIUM = 3
AGS_GS_RESOURCES_HIGH = 4
AGS_GS_RESOURCES_VERY_HIGH = 5
AGS_GS_RESOURCES_MAXIMUM = 6
-- Town Centers(城镇中心类型 0：无首都城镇中心 1：首都不算地标 2：首都城镇算作地标)
AGS_GS_TC_RESTRICTIONS_NONE = 0
AGS_GS_TC_RESTRICTIONS_NORMAL = 1
AGS_GS_TC_RESTRICTIONS_LANDMARKS = 2
---------------------------------------------------------------------------------------------------
--包含当前房主设置游戏的所有参数。
--主要用于开局时房主设定游戏参数的特定UI和选项。玩法逻辑里不应该使用这些参数！
AGS_GS_LOCAL_PLAYER = nil
AGS_GLOBAL_SETTINGS_BUILD = "1.0.1"
AGS_GLOBAL_SETTINGS_MODULE = "AGS_GlobalSettings"
AGS_GLOBAL_SETTINGS = {
  Annihilation = true, -- 玩家剩余单位为0. 
  Elimination = true, -- 玩家退出对局.
  Surrender = true, -- 玩家投降.
  Conquest = true, -- 地标征服.
  Regicide = false, -- 玩家国王阵亡.
  Religious = true, -- 圣地征服.
  Wonder = true, -- 奇观征服.
  Score = false, -- 积分制征服.
  
  Settlement = AGS_GS_SETTLEMENT_SETTLED, -- 开局类型或游戏模式(默认定居).
  Treaty = false, -- 条约(默认禁止).
  TeamVictory = AGS_GS_TEAM_VICTORY_STANDARD, -- 获胜条件.
  TeamSolidarity = false, -- 同生共死(死一家=死全家).
  MaintainTeamBalance = AGS_GS_TEAM_BALANCE_NONE,
  
  EliminationSettings = {
    EnableAITakeover = false, -- AI接管尸体(防止玩家意外掉线导致游戏gg).
  },  
--征服类型
  ConquestSettings = {
    Capital = true,
    Landmarks = true,
    TownCenters = false,
    Keeps = false,
    Wonder = false,
    IsTeamShared = false,
  },
--圣地设置
  ReligiousSettings = {
    Timer = 10,
    ResumableTimer = false, --恢复计时
    SingleCentralSite = false, --中心单个圣地
    MilitarySites = false, -- undefined, used by KOTH
    Refresh = true, -- undefined, as it's always active
    RefreshTimer = 1, -- undefined, in minutes as all other timers
    MilitarySitesUpRate = 1000, -- undefined, used by KOTH
    MilitarySitesDownRate = 1000, -- undefined, used by KOTH
  },
--奇观设置
  WonderSettings = {
    Timer = 15,
    LastStand = false, --守护奇观至最后一刻
    ScaleCost = AGS_GS_WONDER_SCALE_COST_DISABLED, --奇观成本增益
  },
  ScoreSettings = {
    Timer = 60,
    ShowPlacement = false,
  },
--条约设置
  TreatySettings = {
    Timer = 0, -- 条约倒计时.
    ChangeRelations = true, -- undefined, used for testing treaty without diplomacy module.
  },
  
  Diplomacy = true, --外交(游戏内是否能随便更换盟友关系).
  Tributes = true, --进贡(关了就不能送资源给盟友了)
  Relations = false,
  TeamVision = AGS_GS_TEAM_VISION_ALWAYS, -- 团队视野
  MapVision = AGS_GS_MAP_VISION_EXPLORED, -- 地图视野
  
  StartingAge = AGS_GS_AGE_DARK, --起始时代
  EndingAge = AGS_GS_AGE_LATE_IMPERIAL, --结束时代
  TechnologyAge = AGS_GS_AGE_NONE, --科技时代
  StartingResources = AGS_GS_RESOURCES_NORMAL, --起始资源
  RevealFowOnElimination = true, -- 被消灭后移除战争迷雾
  
  ScoreVisibility = false, --显示玩家分数
  MinimumPopulation = 0,
  MinimumPopulationReset = false,
  MaximumPopulation = 200, 
  AdditionalHouseCapacity = 0, --提高房屋容量
  StartingVillagers = 6, -- 开局村民数量
  StartingKeeps = 0, -- 城堡开局
  EarlyMarket = false,
  NoDock = true, -- 无码头
  TreeBombardment = false, -- 树木爆破
  GameRates = 1.00, -- 游戏速度(采集速度，建造，科技)
  UnitRates = 1.00, -- 单位速度
  DoubleWorkers = false, -- 双倍农民
  TownCenterRestrictions = AGS_GS_TC_RESTRICTIONS_NONE, -- 城镇中心数量限制
  
  StartingKings = 0, -- 国王开局 
  Ding = false, -- 彩蛋
  SimulationSpeed = 1.00, -- 模拟游戏速度(多人游戏无效)
  EmpoweredKings = false,
  WonderConstruction = false,
  Treasures = false,
  
  ScatteredScout = false, -- defined only for nomad
  StartingMonks = 1, --undefined
  StartingScouts = 1, -- undefined
  StartingSheeps = 3, -- undefined
  StartingJoanOfArc = 1, -- undefined
  StartingTownCenters = 1, -- undefined
  RevealSpawn = true, -- undefined
  RevealSettings = {
    Radius = 70, -- undefined
    Duration = 0.25, -- undefined
  },
  IsTestMode = false, -- undefined
  IsAdjustingAI = true, -- undefined
  EnableUtilities = true, -- undefined
  AllowLoserSpectation = true, -- undefined
  UsingPrefabStart = true, -- undefined, is related to .rdo file starting conditions
  
  PlayerColors = {
    IsEnforcing = false,
  },
  PlayerHandicaps = {
    HandicapType = AGS_GS_HANDICAP_TYPE_DISABLED,
    FirstSlot = 0.0, 
    SecondSlot = 0.0, 
    ThirdSlot = 0.0, 
    FourthSlot = 0.0, 
    FifthSlot = 0.0, 
    SixthSlot = 0.0, 
    SeventhSlot = 0.0, 
    EighthSlot = 0.0, 
  },
  
  MatchUI = true, -- undefined
  ObserverUI = true, -- undefined
  TournamentNomadBalance = false,
--文明后缀名
  Prefixes = {
      english = "eng",
      french = "fre",
      french_ha_01="fre_ha_01",
      chinese = "chi",
      chinese_ha_01 = "chi_ha_01",
      hre = "hre",
      hre_ha_01 = 'hre_ha_01',
      mongol = "mon",
      rus = "rus",
      sultanate = "sul",
      abbasid = 'abb',
      abbasid_ha_01= 'abb_ha_01',
      malian = 'mal',
      ottoman = 'ott',
      japanese = 'jpn',
      byzantine = 'byz',
    },
	
--新增部分
  EnableEmpireWar = false
}

---------------------------------------------------------------------------------------------------
-- 事件委托:
---------------------------------------------------------------------------------------------------

--这函数的用法是：括号中填入字符，这个函数会把带这个字段前缀且在全局范围内的所有函数全部调用。
--即AGS_GLOBAL_SETTINGS_MODULE = "AGS_GlobalSettings"表示只要你函数是AGS_GlobalSettings_xxxx这种的都会被调用(scardoc:445)
Core_RegisterModule(AGS_GLOBAL_SETTINGS_MODULE)  


-- 设置游戏获胜条件并将其覆盖到 AGS_GLOBAL_SETTINGS 里.
function AGS_GlobalSettings_SetupSettings(options)  
  AGS_Print("AGS_GlobalSettings_SetupSettings")
  
  -- Options 不能为空.
  if not options then
    return
  end
  
  if options.section_inner_win_conditions then
    AGS_GlobalSettings_DefineWinConditions(options.section_inner_win_conditions)
  end
  
  if options.section_inner_game_conditions then
    AGS_GlobalSettings_DefineGameConditions(options.section_inner_game_conditions)
  end
  
  if options.section_outer_win_settings then
    AGS_GlobalSettings_DefineWinSettings(options.section_outer_win_settings)
  end
  
  if options.section_outer_game_settings then
    AGS_GlobalSettings_DefineGameSettings(options.section_outer_game_settings)
  end
  
  if options.section_outer_match_settings then
    AGS_GlobalSettings_DefineMatchSettings(options.section_outer_match_settings)
  end
  
  if options.section_outer_legacy_settings then
    AGS_GlobalSettings_DefineLegacySettings(options.section_outer_legacy_settings)
  end
  
  if options.section_outer_player_settings then
    AGS_GlobalSettings_DefinePlayerSettings(options.section_outer_player_settings)
  end
  
  if options.section_outer_handicap_settings then
    AGS_GlobalSettings_DefineHandicapSettings(options.section_outer_handicap_settings)
  end
	
  if options.section_resource_sup_setting then
    AGS_GlobalSettings_DefineResourceSupSetting(options.section_resource_sup_setting)
  end
	
  Rule_AddOneShot(Reinforce_AI_DefaultSettings,2)
end

function Reinforce_AI_DefaultSettings()
	--MapVision
    --AGS_GS_SETTLEMENT_SETTLED
	  --Rule_AddOneShot(ChallengeMission_AssignUnitsToResources, 0)
    Rule_AddOneShot(AGS_AIMadModel, 780)
    --Rule_AddOneShot(AGS_Spawn_Ram, 900)
end

function AGS_GlobalSettings_EarlyInitializations()
  AGS_Print("AGS_GlobalSettings_EarlyInitializations")
  AGS_GlobalSettings_OnLocalPlayerChanged({ player = Game_GetLocalPlayer() })
  Rule_AddGlobalEvent(AGS_GlobalSettings_OnLocalPlayerChanged, GE_LocalPlayerChanged)
end

function AGS_GlobalSettings_OnGameOver()
  AGS_Print("AGS_GlobalSettings_OnGameOver")
  Rule_RemoveGlobalEvent(AGS_GlobalSettings_OnLocalPlayerChanged)
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------
-- Called when local player is changed.
function AGS_GlobalSettings_OnLocalPlayerChanged(context)
  -- Game almost always sends only ID, we will convert it to player from global table.
  if context ~= nil and context.player ~= nil then
    AGS_GS_LOCAL_PLAYER = Core_GetPlayersTableEntry(context.player)
    AGS_Print("Local Player:", AGS_GS_LOCAL_PLAYER, 2)
  end
end

---------------------------------------------------------------------------------------------------
-- Switch Functions:
---------------------------------------------------------------------------------------------------

function AGS_GlobalSettings_DefineWinConditions(category)  
  if category.option_win_condition_annihilation ~= nil then
    AGS_GLOBAL_SETTINGS.Annihilation = category.option_win_condition_annihilation
  end
  if category.option_win_condition_elimination ~= nil then
    AGS_GLOBAL_SETTINGS.Elimination = category.option_win_condition_elimination
  end
  if category.option_win_condition_surrender ~= nil then
    AGS_GLOBAL_SETTINGS.Surrender = category.option_win_condition_surrender
  end
  if category.option_win_condition_conquest ~= nil then
    AGS_GLOBAL_SETTINGS.Conquest = category.option_win_condition_conquest
  end
  if category.option_win_condition_regicide ~= nil then
    AGS_GLOBAL_SETTINGS.Regicide = category.option_win_condition_regicide
  end
  if category.option_win_condition_religious ~= nil then
    AGS_GLOBAL_SETTINGS.Religious = category.option_win_condition_religious
  end
  if category.option_win_condition_wonder ~= nil then
    AGS_GLOBAL_SETTINGS.Wonder = category.option_win_condition_wonder
  end
  if category.option_win_condition_score ~= nil then
    AGS_GLOBAL_SETTINGS.Score = category.option_win_condition_score
  end   
end

function AGS_GlobalSettings_DefineGameConditions(category)
  if category.option_game_condition_settlement then
    AGS_GlobalSettings_SetSettlement(category.option_game_condition_settlement)
  end
  if category.option_game_condition_treaty then
    -- This shares same category as we are considering 0 minutes as treaty disabled instead of separate checkbox.
    AGS_GlobalSettings_SetTreaty(category.option_game_condition_treaty)
    AGS_GlobalSettings_SetTreatyTimer(category.option_game_condition_treaty)
  end
  if category.option_game_condition_team_victory then
    AGS_GlobalSettings_SetTeamVictory(category.option_game_condition_team_victory)
  end
  if category.option_game_condition_team_solidarity ~= nil then
    AGS_GLOBAL_SETTINGS.TeamSolidarity = category.option_game_condition_team_solidarity
  end
  if category.option_game_condition_maintain_team_balance then
    AGS_GlobalSettings_SetMaintainTeamBalance(category.option_game_condition_maintain_team_balance)
  end
  if category.option_game_condition_enable_ai_takeovers ~= nil then
    AGS_GLOBAL_SETTINGS.EliminationSettings.EnableAITakeover = category.option_game_condition_enable_ai_takeovers
  end
end

function AGS_GlobalSettings_DefineWinSettings(category)    
  if category.option_win_setting_conquest_capital ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.Capital = category.option_win_setting_conquest_capital
  end  
  if category.option_win_setting_conquest_landmarks ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.Landmarks = category.option_win_setting_conquest_landmarks
  end  
  if category.option_win_setting_conquest_town_centers ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.TownCenters = category.option_win_setting_conquest_town_centers
  end  
  if category.option_win_setting_conquest_keeps ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.Keeps = category.option_win_setting_conquest_keeps
  end
  if category.option_win_setting_conquest_wonder ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.Wonder = category.option_win_setting_conquest_wonder
  end  
  if category.option_win_setting_conquest_is_team_shared ~= nil then
    AGS_GLOBAL_SETTINGS.ConquestSettings.IsTeamShared = category.option_win_setting_conquest_is_team_shared
  end  
  if category.option_win_setting_religious_timer then
    AGS_GlobalSettings_SetReligiousTimer(category.option_win_setting_religious_timer)
  end
  if category.option_win_setting_religious_resumable_timer ~= nil then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.ResumableTimer = category.option_win_setting_religious_resumable_timer
  end
  if category.option_win_setting_religious_central_site_only ~= nil then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.SingleCentralSite = category.option_win_setting_religious_central_site_only
  end
  if category.option_win_setting_wonder_timer then
    AGS_GlobalSettings_SetWonderTimer(category.option_win_setting_wonder_timer)
  end
  if category.option_win_setting_wonder_last_stand ~= nil then
    AGS_GLOBAL_SETTINGS.WonderSettings.LastStand = category.option_win_setting_wonder_last_stand
  end
  if category.option_win_setting_wonder_scale_cost then
    AGS_GlobalSettings_SetWonderScaleCost(category.option_win_setting_wonder_scale_cost)
  end  
  if category.option_win_setting_score_timer then
    AGS_GlobalSettings_SetScoreTimer(category.option_win_setting_score_timer)
  end
  if category.option_win_setting_score_show_placement ~= nil then
    AGS_GLOBAL_SETTINGS.ScoreSettings.ShowPlacement = category.option_win_setting_score_show_placement
  end
end

--game mode.rdo里的game setting 的综合配置在此添加
function AGS_GlobalSettings_DefineGameSettings(category)
  if category.option_game_setting_tributes ~= nil then
    AGS_GLOBAL_SETTINGS.Tributes = category.option_game_setting_tributes
  end
  if category.option_game_setting_relations ~= nil then
    AGS_GLOBAL_SETTINGS.Relations = category.option_game_setting_relations
  end
  if category.option_game_setting_team_vision then
    AGS_GlobalSettings_SetTeamVision(category.option_game_setting_team_vision)
  end  
  if category.option_game_setting_map_vision then
    AGS_GlobalSettings_SetMapVision(category.option_game_setting_map_vision)
  end
  if category.option_game_setting_starting_age then
    AGS_GlobalSettings_SetStartingAge(category.option_game_setting_starting_age)
  end  
  if category.option_game_setting_ending_age then
    AGS_GlobalSettings_SetEndingAge(category.option_game_setting_ending_age)
  end  
  if category.option_game_setting_technology_age then
    AGS_GlobalSettings_SetTechnologyAge(category.option_game_setting_technology_age)
  end  
  if category.option_game_setting_starting_resources then
    AGS_GlobalSettings_SetStartingResources(category.option_game_setting_starting_resources)
  end
  if category.option_game_setting_reveal_fow_on_elimination ~= nil then
    AGS_GLOBAL_SETTINGS.RevealFowOnElimination = category.option_game_setting_reveal_fow_on_elimination
  end
	--如果帝国战争模式选项不为空，给全局对应选项赋值
  if category.option_game_setting_empire_war ~= nil then
    AGS_GLOBAL_SETTINGS.EnableEmpireWar = category.option_game_setting_empire_war
  end
end

function AGS_GlobalSettings_DefineMatchSettings(category)
  if category.option_match_setting_show_score ~= nil then
    AGS_GLOBAL_SETTINGS.ScoreVisibility = category.option_match_setting_show_score
  end
  if category.option_match_setting_min_population then
    AGS_GlobalSettings_SetMinimumPopulation(category.option_match_setting_min_population)
  end
  if category.option_match_setting_max_population then
    AGS_GlobalSettings_SetMaximumPopulation(category.option_match_setting_max_population)
  end
  if category.option_match_setting_add_house_capacity then
    AGS_GlobalSettings_SetAdditionalHouseCapacity(category.option_match_setting_add_house_capacity)
  end
  if category.option_match_setting_starting_villagers then
    AGS_GlobalSettings_SetStartingVillagers(category.option_match_setting_starting_villagers)
  end
  if category.option_match_setting_starting_keeps then
    AGS_GlobalSettings_SetStartingKeeps(category.option_match_setting_starting_keeps)
  end
  if category.option_match_setting_early_market ~= nil then
    AGS_GLOBAL_SETTINGS.EarlyMarket = category.option_match_setting_early_market
  end
  if category.option_match_setting_no_dock ~= nil then
    AGS_GLOBAL_SETTINGS.NoDock = category.option_match_setting_no_dock
  end
  if category.option_match_setting_tree_bombardment ~= nil then
    AGS_GLOBAL_SETTINGS.TreeBombardment = category.option_match_setting_tree_bombardment
  end
  if category.option_match_setting_double_workers ~= nil then
    AGS_GLOBAL_SETTINGS.DoubleWorkers = category.option_match_setting_double_workers
  end
  if category.option_match_setting_town_center_restrictions then
    AGS_GlobalSettings_SetTownCenterRestricts(category.option_match_setting_town_center_restrictions)
  end
  if category.option_match_setting_treasures ~= nil then
    AGS_GLOBAL_SETTINGS.Treasures = category.option_match_setting_treasures
  end
  if category.option_match_setting_scattered_scout ~= nil then
    AGS_GLOBAL_SETTINGS.ScatteredScout = category.option_match_setting_scattered_scout
  end
  if category.option_match_setting_tournament_nomad_balance ~= nil then
    AGS_GLOBAL_SETTINGS.TournamentNomadBalance = category.option_match_setting_tournament_nomad_balance
  end
end

function AGS_GlobalSettings_DefineLegacySettings(category)
  if category.option_legacy_setting_starting_kings then
    AGS_GlobalSettings_SetStartingKings(category.option_legacy_setting_starting_kings)
  end
  if category.option_legacy_setting_ding ~= nil then
    AGS_GLOBAL_SETTINGS.Ding = category.option_legacy_setting_ding
  end
  if category.option_legacy_setting_empowered_kings ~= nil then
    AGS_GLOBAL_SETTINGS.EmpoweredKings = category.option_legacy_setting_empowered_kings
  end
  if category.option_legacy_setting_wonder_construction ~= nil then
    AGS_GLOBAL_SETTINGS.WonderConstruction = category.option_legacy_setting_wonder_construction
  end
  if category.option_legacy_setting_simulation_speed then
    AGS_GlobalSettings_SetSimulationSpeed(category.option_legacy_setting_simulation_speed)
  end
  if category.option_legacy_setting_unit_rates then
    AGS_GlobalSettings_SetUnitRates(category.option_legacy_setting_unit_rates)
  end
  if category.option_legacy_setting_game_rates then
    AGS_GlobalSettings_SetGameRates(category.option_legacy_setting_game_rates)
  end
end

function AGS_GlobalSettings_DefinePlayerSettings(category)
  if category.option_player_setting_color_is_enforcing ~= nil then
    AGS_GLOBAL_SETTINGS.PlayerColors.IsEnforcing = category.option_player_setting_color_is_enforcing
  end
end

function AGS_GlobalSettings_DefineHandicapSettings(category)
  if category.option_handicap_setting_handicap_type ~= nil then
    AGS_GlobalSettings_SetHandicapType(category.option_handicap_setting_handicap_type)
  end
  AGS_GlobalSettings_SetSlotHandicaps(category)
end

function AGS_GlobalSettings_DefineResourceSupSetting(category)
  -- 资源支援函数
    -- option_setting_resource_amount
    -- 此处只要根据设置生成倍率，写入全局变量
    if category.option_setting_resource_amount.enum_value == category.option_setting_resource_amount.enum_items.resource_0 then
      AGS_GLOBAL_SETTINGS.ResourceSupRate = 1
    elseif category.option_setting_resource_amount.enum_value == category.option_setting_resource_amount.enum_items.resource_1 then
      AGS_GLOBAL_SETTINGS.ResourceSupRate = 1.5
    elseif category.option_setting_resource_amount.enum_value == category.option_setting_resource_amount.enum_items.resource_2 then
      AGS_GLOBAL_SETTINGS.ResourceSupRate = 2
    elseif category.option_setting_resource_amount.enum_value == category.option_setting_resource_amount.enum_items.resource_3 then
      AGS_GLOBAL_SETTINGS.ResourceSupRate = 3
    end	
end
  
---------------------------------------------------------------------------------------------------
-- Assignment Functions:
---------------------------------------------------------------------------------------------------

function AGS_GlobalSettings_SetHandicapType(handicap_type)
  if handicap_type.enum_value == handicap_type.enum_items.handicap_type_none then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.HandicapType = AGS_GS_HANDICAP_TYPE_DISABLED
  elseif handicap_type.enum_value == handicap_type.enum_items.handicap_type_economic then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.HandicapType = AGS_GS_HANDICAP_TYPE_ECONOMIC
  elseif handicap_type.enum_value == handicap_type.enum_items.handicap_type_military then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.HandicapType = AGS_GS_HANDICAP_TYPE_MILITARY
  elseif handicap_type.enum_value == handicap_type.enum_items.handicap_type_both then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.HandicapType = AGS_GS_HANDICAP_TYPE_BOTH
  end
end

function AGS_GlobalSettings_SetSlotHandicaps(category)
  if category.option_player_setting_slot_1 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.FirstSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_1)
  end
  if category.option_player_setting_slot_2 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.SecondSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_2)
  end
  if category.option_player_setting_slot_3 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.ThirdSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_3)
  end
  if category.option_player_setting_slot_4 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.FourthSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_4)
  end
  if category.option_player_setting_slot_5 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.FifthSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_5)
  end
  if category.option_player_setting_slot_6 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.SixthSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_6)
  end
  if category.option_player_setting_slot_7 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.SeventhSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_7)
  end
  if category.option_player_setting_slot_8 then
    AGS_GLOBAL_SETTINGS.PlayerHandicaps.EighthSlot = AGS_GlobalSettings_RetrieveSlotHandicap(category.option_player_setting_slot_8)
  end
end

function AGS_GlobalSettings_RetrieveSlotHandicap(slot_handicap)
  if slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_disabled then
    return 0.0
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_1 then
    return 1.1
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_2 then
    return 1.2
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_3 then
    return 1.3
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_4 then
    return 1.4
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_5 then
    return 1.5
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_6 then
    return 1.6
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_7 then
    return 1.7
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_8 then
    return 1.8
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_1_9 then
    return 1.9
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_2 then
    return 2.0
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_2_5 then
    return 2.5
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_3 then
    return 3.0
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_3_5 then
    return 3.5
  elseif slot_handicap.enum_value == slot_handicap.enum_items.slot_handicap_4 then
    return 4.0
  end
end

function AGS_GlobalSettings_SetMaintainTeamBalance(maintain_team_balance)
  if maintain_team_balance.enum_value == maintain_team_balance.enum_items.maintain_team_balance_none then
    AGS_GLOBAL_SETTINGS.MaintainTeamBalance = AGS_GS_TEAM_BALANCE_NONE
  elseif maintain_team_balance.enum_value == maintain_team_balance.enum_items.maintain_team_balance_population then
    AGS_GLOBAL_SETTINGS.MaintainTeamBalance = AGS_GS_TEAM_BALANCE_POPULATION
  elseif maintain_team_balance.enum_value == maintain_team_balance.enum_items.maintain_team_balance_resources then
    AGS_GLOBAL_SETTINGS.MaintainTeamBalance = AGS_GS_TEAM_BALANCE_RESOURCES
  end
end

function AGS_GlobalSettings_SetSettlement(settlement)
  if settlement.enum_value == settlement.enum_items.settlement_scattered then
    AGS_GLOBAL_SETTINGS.Settlement = AGS_GS_SETTLEMENT_SCATTERED
  elseif settlement.enum_value == settlement.enum_items.settlement_nomadic then
    AGS_GLOBAL_SETTINGS.Settlement = AGS_GS_SETTLEMENT_NOMADIC
  elseif settlement.enum_value == settlement.enum_items.settlement_settled then
    AGS_GLOBAL_SETTINGS.Settlement = AGS_GS_SETTLEMENT_SETTLED
  elseif settlement.enum_value == settlement.enum_items.settlement_settled_fortified then
    AGS_GLOBAL_SETTINGS.Settlement = AGS_GS_SETTLEMENT_FORTIFIED  
  end
end

function AGS_GlobalSettings_SetTreaty(treaty)
  if treaty.enum_value == treaty.enum_items.treaty_0 then
    AGS_GLOBAL_SETTINGS.Treaty = false
  else
    AGS_GLOBAL_SETTINGS.Treaty = true
  end  
end

function AGS_GlobalSettings_SetTreatyTimer(treaty)
  if treaty.enum_value == treaty.enum_items.treaty_0 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 0
  elseif treaty.enum_value == treaty.enum_items.treaty_3 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 3
  elseif treaty.enum_value == treaty.enum_items.treaty_5 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 5
  elseif treaty.enum_value == treaty.enum_items.treaty_10 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 10
  elseif treaty.enum_value == treaty.enum_items.treaty_15 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 15
  elseif treaty.enum_value == treaty.enum_items.treaty_20 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 20
  elseif treaty.enum_value == treaty.enum_items.treaty_25 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 25
  elseif treaty.enum_value == treaty.enum_items.treaty_30 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 30
  elseif treaty.enum_value == treaty.enum_items.treaty_35 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 35
  elseif treaty.enum_value == treaty.enum_items.treaty_40 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 40
  elseif treaty.enum_value == treaty.enum_items.treaty_45 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 45
  elseif treaty.enum_value == treaty.enum_items.treaty_50 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 50
  elseif treaty.enum_value == treaty.enum_items.treaty_55 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 55
  elseif treaty.enum_value == treaty.enum_items.treaty_60 then
    AGS_GLOBAL_SETTINGS.TreatySettings.Timer = 60
  end
end

function AGS_GlobalSettings_SetTeamVictory(team_victory)
  if team_victory.enum_value == team_victory.enum_items.team_victory_ffa then
    AGS_GLOBAL_SETTINGS.TeamVictory = AGS_GS_TEAM_VICTORY_FFA
  elseif team_victory.enum_value == team_victory.enum_items.team_victory_standard then
    AGS_GLOBAL_SETTINGS.TeamVictory = AGS_GS_TEAM_VICTORY_STANDARD
  elseif team_victory.enum_value == team_victory.enum_items.team_victory_dynamic then
    AGS_GLOBAL_SETTINGS.TeamVictory = AGS_GS_TEAM_VICTORY_DYNAMIC
  end
end

function AGS_GlobalSettings_SetReligiousTimer(religious_timer)
  if religious_timer.enum_value == religious_timer.enum_items.religious_timer_0 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 0
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_1 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 1
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_2 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 2
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_3 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 3
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_4 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 4
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_5 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 5
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_6 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 6
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_7 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 7
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_8 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 8
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_9 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 9
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_10 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 10
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_11 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 11
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_12 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 12
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_13 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 13
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_14 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 14
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_15 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 15
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_20 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 20
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_25 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 25
  elseif religious_timer.enum_value == religious_timer.enum_items.religious_timer_30 then
    AGS_GLOBAL_SETTINGS.ReligiousSettings.Timer = 30
  end
end

function AGS_GlobalSettings_SetWonderTimer(wonder_timer)
  if wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_0 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 0
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_1 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 1          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_2 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 2          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_3 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 3          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_4 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 4          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_5 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 5          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_6 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 6          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_7 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 7          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_8 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 8          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_9 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 9          
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_10 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 10         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_11 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 11         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_12 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 12         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_13 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 13         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_14 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 14         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_15 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 15         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_20 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 20         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_25 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 25         
  elseif wonder_timer.enum_value == wonder_timer.enum_items.wonder_timer_30 then
    AGS_GLOBAL_SETTINGS.WonderSettings.Timer = 30
  end
end

function AGS_GlobalSettings_SetWonderScaleCost(scale_cost)
  if scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_disabled then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = AGS_GS_WONDER_SCALE_COST_DISABLED
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_0 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 0
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_250 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 250
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_375 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 375
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_500 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 500
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_750 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 750
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_1000 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 1000
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_1500 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 1500
  elseif scale_cost.enum_value == scale_cost.enum_items.wonder_scale_cost_2000 then
    AGS_GLOBAL_SETTINGS.WonderSettings.ScaleCost = 2000
  end
end

function AGS_GlobalSettings_SetScoreTimer(score_timer)
  if score_timer.enum_value == score_timer.enum_items.score_timer_5 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 5
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_15 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 15   
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_20 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 20   
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_25 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 25   
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_30 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 30   
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_35 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 35    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_40 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 40    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_45 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 45    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_50 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 50    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_55 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 55    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_60 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 60    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_65 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 65    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_70 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 70    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_75 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 75    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_80 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 80    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_85 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 85    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_90 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 90    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_95 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 95    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_110 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 110    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_115 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 115    
  elseif score_timer.enum_value == score_timer.enum_items.score_timer_120 then
    AGS_GLOBAL_SETTINGS.ScoreSettings.Timer = 120        
  end
end

function AGS_GlobalSettings_SetTeamVision(team_vision)
  if team_vision.enum_value == team_vision.enum_items.team_vision_none then
    AGS_GLOBAL_SETTINGS.TeamVision = AGS_GS_TEAM_VISION_NONE
  elseif team_vision.enum_value == team_vision.enum_items.team_vision_requires_market then
    AGS_GLOBAL_SETTINGS.TeamVision = AGS_GS_TEAM_VISION_REQUIRES_MARKET
  elseif team_vision.enum_value == team_vision.enum_items.team_vision_always then
    AGS_GLOBAL_SETTINGS.TeamVision = AGS_GS_TEAM_VISION_ALWAYS
  end
end

function AGS_GlobalSettings_SetMapVision(map_vision)
  if map_vision.enum_value == map_vision.enum_items.map_vision_concealed then
    AGS_GLOBAL_SETTINGS.MapVision = AGS_GS_MAP_VISION_CONCEALED
  elseif map_vision.enum_value == map_vision.enum_items.map_vision_explored then
    AGS_GLOBAL_SETTINGS.MapVision = AGS_GS_MAP_VISION_EXPLORED
  elseif map_vision.enum_value == map_vision.enum_items.map_vision_revealed then
    AGS_GLOBAL_SETTINGS.MapVision = AGS_GS_MAP_VISION_REVEALED
  end
end

function AGS_GlobalSettings_SetStartingAge(starting_age)  
  if starting_age.enum_value == starting_age.enum_items.starting_age_1 then
    AGS_GLOBAL_SETTINGS.StartingAge = AGS_GS_AGE_DARK 
  elseif starting_age.enum_value == starting_age.enum_items.starting_age_2 then
    AGS_GLOBAL_SETTINGS.StartingAge = AGS_GS_AGE_FEUDAL 
  elseif starting_age.enum_value == starting_age.enum_items.starting_age_3 then
    AGS_GLOBAL_SETTINGS.StartingAge = AGS_GS_AGE_CASTLE 
  elseif starting_age.enum_value == starting_age.enum_items.starting_age_4 then
    AGS_GLOBAL_SETTINGS.StartingAge = AGS_GS_AGE_IMPERIAL     
  end
end

function AGS_GlobalSettings_SetEndingAge(ending_age)  
  if ending_age.enum_value == ending_age.enum_items.ending_age_1 then
    AGS_GLOBAL_SETTINGS.EndingAge = AGS_GS_AGE_DARK 
  elseif ending_age.enum_value == ending_age.enum_items.ending_age_2 then
    AGS_GLOBAL_SETTINGS.EndingAge = AGS_GS_AGE_FEUDAL 
  elseif ending_age.enum_value == ending_age.enum_items.ending_age_3 then
    AGS_GLOBAL_SETTINGS.EndingAge = AGS_GS_AGE_CASTLE 
  elseif ending_age.enum_value == ending_age.enum_items.ending_age_4 then
    AGS_GLOBAL_SETTINGS.EndingAge = AGS_GS_AGE_IMPERIAL   
  elseif ending_age.enum_value == ending_age.enum_items.ending_age_5 then
    AGS_GLOBAL_SETTINGS.EndingAge = AGS_GS_AGE_LATE_IMPERIAL     
  end
end

function AGS_GlobalSettings_SetTechnologyAge(technology_age)  
  if technology_age.enum_value == technology_age.enum_items.technology_age_0 then
    AGS_GLOBAL_SETTINGS.TechnologyAge = AGS_GS_AGE_NONE
  elseif technology_age.enum_value == technology_age.enum_items.technology_age_1 then
    AGS_GLOBAL_SETTINGS.TechnologyAge = AGS_GS_AGE_DARK 
  elseif technology_age.enum_value == technology_age.enum_items.technology_age_2 then
    AGS_GLOBAL_SETTINGS.TechnologyAge = AGS_GS_AGE_FEUDAL 
  elseif technology_age.enum_value == technology_age.enum_items.technology_age_3 then
    AGS_GLOBAL_SETTINGS.TechnologyAge = AGS_GS_AGE_CASTLE 
  elseif technology_age.enum_value == technology_age.enum_items.technology_age_4 then
    AGS_GLOBAL_SETTINGS.TechnologyAge = AGS_GS_AGE_IMPERIAL     
  end
end

function AGS_GlobalSettings_SetStartingResources(starting_resources)
  if starting_resources.enum_value == starting_resources.enum_items.starting_resources_none then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_NONE  
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_low then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_LOW
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_normal then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_NORMAL
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_medium then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_MEDIUM
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_high then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_HIGH
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_very_high then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_VERY_HIGH
  elseif starting_resources.enum_value == starting_resources.enum_items.starting_resources_maximum then
    AGS_GLOBAL_SETTINGS.StartingResources = AGS_GS_RESOURCES_MAXIMUM
  end
end

function AGS_GlobalSettings_SetMinimumPopulation(min_population)
  if min_population.enum_value == min_population.enum_items.min_population_0 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 0
  elseif min_population.enum_value == min_population.enum_items.min_population_25 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 25
  elseif min_population.enum_value == min_population.enum_items.min_population_50 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 50
  elseif min_population.enum_value == min_population.enum_items.min_population_75 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 75
  elseif min_population.enum_value == min_population.enum_items.min_population_100 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 100
  elseif min_population.enum_value == min_population.enum_items.min_population_125 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 125
  elseif min_population.enum_value == min_population.enum_items.min_population_150 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 150
  elseif min_population.enum_value == min_population.enum_items.min_population_175 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 175
  elseif min_population.enum_value == min_population.enum_items.min_population_200 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 200
  elseif min_population.enum_value == min_population.enum_items.min_population_225 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 225
  elseif min_population.enum_value == min_population.enum_items.min_population_250 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 250
  elseif min_population.enum_value == min_population.enum_items.min_population_275 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 275
  elseif min_population.enum_value == min_population.enum_items.min_population_300 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 300
  elseif min_population.enum_value == min_population.enum_items.min_population_350 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 350
  elseif min_population.enum_value == min_population.enum_items.min_population_400 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 400
  elseif min_population.enum_value == min_population.enum_items.min_population_450 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 450
  elseif min_population.enum_value == min_population.enum_items.min_population_500 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 500
  elseif min_population.enum_value == min_population.enum_items.min_population_550 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 550
  elseif min_population.enum_value == min_population.enum_items.min_population_600 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 600
  elseif min_population.enum_value == min_population.enum_items.min_population_650 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 650
  elseif min_population.enum_value == min_population.enum_items.min_population_700 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 700
  elseif min_population.enum_value == min_population.enum_items.min_population_750 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 750
  elseif min_population.enum_value == min_population.enum_items.min_population_800 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 800
  elseif min_population.enum_value == min_population.enum_items.min_population_850 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 850
  elseif min_population.enum_value == min_population.enum_items.min_population_900 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 900
  elseif min_population.enum_value == min_population.enum_items.min_population_950 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 950
  elseif min_population.enum_value == min_population.enum_items.min_population_1000 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 1000
  elseif min_population.enum_value == min_population.enum_items.min_population_10000 then
    AGS_GLOBAL_SETTINGS.MinimumPopulation = 10000
  end
end

function AGS_GlobalSettings_SetMaximumPopulation(max_population)
  if max_population.enum_value == max_population.enum_items.max_population_25 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 25
  elseif max_population.enum_value == max_population.enum_items.max_population_50 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 50
  elseif max_population.enum_value == max_population.enum_items.max_population_75 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 75
  elseif max_population.enum_value == max_population.enum_items.max_population_100 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 100
  elseif max_population.enum_value == max_population.enum_items.max_population_125 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 125
  elseif max_population.enum_value == max_population.enum_items.max_population_150 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 150
  elseif max_population.enum_value == max_population.enum_items.max_population_175 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 175
  elseif max_population.enum_value == max_population.enum_items.max_population_200 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 200
  elseif max_population.enum_value == max_population.enum_items.max_population_225 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 225
  elseif max_population.enum_value == max_population.enum_items.max_population_250 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 250
  elseif max_population.enum_value == max_population.enum_items.max_population_275 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 275
  elseif max_population.enum_value == max_population.enum_items.max_population_300 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 300
  elseif max_population.enum_value == max_population.enum_items.max_population_350 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 350
  elseif max_population.enum_value == max_population.enum_items.max_population_400 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 400
  elseif max_population.enum_value == max_population.enum_items.max_population_450 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 450
  elseif max_population.enum_value == max_population.enum_items.max_population_500 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 500
  elseif max_population.enum_value == max_population.enum_items.max_population_550 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 550
  elseif max_population.enum_value == max_population.enum_items.max_population_600 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 600
  elseif max_population.enum_value == max_population.enum_items.max_population_650 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 650
  elseif max_population.enum_value == max_population.enum_items.max_population_700 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 700
  elseif max_population.enum_value == max_population.enum_items.max_population_750 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 750
  elseif max_population.enum_value == max_population.enum_items.max_population_800 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 800
  elseif max_population.enum_value == max_population.enum_items.max_population_850 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 850
  elseif max_population.enum_value == max_population.enum_items.max_population_900 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 900
  elseif max_population.enum_value == max_population.enum_items.max_population_950 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 950
  elseif max_population.enum_value == max_population.enum_items.max_population_1000 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 1000
  elseif max_population.enum_value == max_population.enum_items.max_population_10000 then
    AGS_GLOBAL_SETTINGS.MaximumPopulation = 10000
  end
end

function AGS_GlobalSettings_SetAdditionalHouseCapacity(additional_house_capactity)
  if additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_0 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 0
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_5 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 5
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_10 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 10
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_15 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 15
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_20 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 20
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_25 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 25
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_30 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 30
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_40 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 40
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_50 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 50
  elseif additional_house_capactity.enum_value == additional_house_capactity.enum_items.add_house_capacity_100 then
    AGS_GLOBAL_SETTINGS.AdditionalHouseCapacity = 100
  end
end

function AGS_GlobalSettings_SetStartingVillagers(starting_villagers)
  if starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_0 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 0
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_1 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 1
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_2 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 2
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_3 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 3
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_4 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 4
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_5 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 5
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_6 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 6
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_7 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 7
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_8 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 8
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_9 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 9
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_10 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 10
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_15 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 15
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_20 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 20
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_25 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 25
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_30 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 30
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_35 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 35
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_40 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 40
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_45 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 45
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_50 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 50
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_75 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 75
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_100 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 100
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_150 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 150
  elseif starting_villagers.enum_value == starting_villagers.enum_items.starting_villagers_200 then
    AGS_GLOBAL_SETTINGS.StartingVillagers = 200
  end
end

function AGS_GlobalSettings_SetStartingKeeps(starting_keeps)
  if starting_keeps ~= nil and starting_keeps then
    AGS_GLOBAL_SETTINGS.StartingKeeps = 1        
  else
    AGS_GLOBAL_SETTINGS.StartingKeeps = 0
  end
end

function AGS_GlobalSettings_SetStartingKings(starting_kings)
  if starting_kings ~= nil and starting_kings then
    AGS_GLOBAL_SETTINGS.StartingKings = 1    
  else
    AGS_GLOBAL_SETTINGS.StartingKings = 0
  end
end

function AGS_GlobalSettings_SetUnitRates(unit_rates)
  if unit_rates.enum_value == unit_rates.enum_items.unit_rates_075 then
    AGS_GLOBAL_SETTINGS.UnitRates = 0.75
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_080 then
    AGS_GLOBAL_SETTINGS.UnitRates = 0.80
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_085 then
    AGS_GLOBAL_SETTINGS.UnitRates = 0.85
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_090 then
    AGS_GLOBAL_SETTINGS.UnitRates = 0.90
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_095 then
    AGS_GLOBAL_SETTINGS.UnitRates = 0.95
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.00
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1_05 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.05
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1_10 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.10
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1_15 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.15
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1_20 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.20
  elseif unit_rates.enum_value == unit_rates.enum_items.unit_rates_1_25 then
    AGS_GLOBAL_SETTINGS.UnitRates = 1.25
  end  
end

function AGS_GlobalSettings_SetGameRates(game_rates)
  if game_rates.enum_value == game_rates.enum_items.game_rates_075 then
    AGS_GLOBAL_SETTINGS.GameRates = 0.75
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_080 then
    AGS_GLOBAL_SETTINGS.GameRates = 0.80
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_085 then
    AGS_GLOBAL_SETTINGS.GameRates = 0.85
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_090 then
    AGS_GLOBAL_SETTINGS.GameRates = 0.90
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_095 then
    AGS_GLOBAL_SETTINGS.GameRates = 0.95
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_05 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.05
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_10 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.10
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_15 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.15
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_20 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.20
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_25 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.25
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_50 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.50
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_1_75 then
    AGS_GLOBAL_SETTINGS.GameRates = 1.75
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_2 then
    AGS_GLOBAL_SETTINGS.GameRates = 2.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_3 then
    AGS_GLOBAL_SETTINGS.GameRates = 3.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_4 then
    AGS_GLOBAL_SETTINGS.GameRates = 4.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_5 then
    AGS_GLOBAL_SETTINGS.GameRates = 5.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_6 then
    AGS_GLOBAL_SETTINGS.GameRates = 6.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_7 then
    AGS_GLOBAL_SETTINGS.GameRates = 7.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_8 then
    AGS_GLOBAL_SETTINGS.GameRates = 8.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_9 then
    AGS_GLOBAL_SETTINGS.GameRates = 9.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_10 then
    AGS_GLOBAL_SETTINGS.GameRates = 10.00
  elseif game_rates.enum_value == game_rates.enum_items.game_rates_20 then
    AGS_GLOBAL_SETTINGS.GameRates = 20.00
  end
end

function AGS_GlobalSettings_SetSimulationSpeed(simulation_speed)
  if simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_075 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 0.75
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_080 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 0.80
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_085 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 0.85
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_090 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 0.90
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_095 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 0.95
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.00
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_05 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.05
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_10 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.10
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_15 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.15
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_20 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.20
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_25 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.25
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_50 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.50
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_1_75 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 1.75
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_2 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 2.00
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_3 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 3.00
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_4 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 4.00
  elseif simulation_speed.enum_value == simulation_speed.enum_items.simulation_speed_5 then
    AGS_GLOBAL_SETTINGS.SimulationSpeed = 5.00
  end
end

function AGS_GlobalSettings_SetTownCenterRestricts(tc_restrictions)
  if tc_restrictions.enum_value == tc_restrictions.enum_items.town_center_restriction_none then
    AGS_GLOBAL_SETTINGS.TownCenterRestrictions = AGS_GS_TC_RESTRICTIONS_NONE 
  elseif tc_restrictions.enum_value == tc_restrictions.enum_items.town_center_restriction_normal then
    AGS_GLOBAL_SETTINGS.TownCenterRestrictions = AGS_GS_TC_RESTRICTIONS_NORMAL 
  elseif tc_restrictions.enum_value == tc_restrictions.enum_items.town_center_restriction_landmarks then
    AGS_GLOBAL_SETTINGS.TownCenterRestrictions = AGS_GS_TC_RESTRICTIONS_LANDMARKS
  end    
end
  
function AGS_AIMadModel()
  Rule_AddInterval(AGS_GiveResources, 30)
  --Rule_AddInterval(AGS_Spawn_Setting, 300)
  Rule_AddInterval(AGS_Spawn_Ram, 150)
end

-- 续命资源
function AGS_GiveResources()
  local rate = AGS_GLOBAL_SETTINGS.ResourceSupRate
  for i, player in pairs(PLAYERS) do
    
    -- 根据玩家类型给资源
    if Player_IsHuman(player.id) then
      Player_AddResource(player.id, RT_Food, 300)
      Player_AddResource(player.id, RT_Gold, 300)
      Player_AddResource(player.id, RT_Wood, 150)
      Player_AddResource(player.id, RT_Stone, 150)
    else
      Player_AddResource(player.id, RT_Food, rate*300*2)
      Player_AddResource(player.id, RT_Gold, rate*300*2)
      Player_AddResource(player.id, RT_Wood, rate*150*2)
    end
  end
end


-- Assign units to resources
function ChallengeMission_AssignUnitsToResources()
  
  -- Assign units
  local function _AssignFarmer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    local e_closest_farm = EGroup_GetClosestEntity(eg_farms, Util_GetPosition(sid))
    if e_closest_farm ~= nil then
      EGroup_Single(eg_single, e_closest_farm)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_farms, e_closest_farm)
    else
      print("Could not find farm to assign villager to")
    end
  end
  
  local function _AssignFisherman(gid, idx, sid)
    
    SGroup_Single(sg_single, sid)
    local e_closest_fish = EGroup_GetClosestEntity(eg_shore_fish, Util_GetPosition(sid))
    if e_closest_fish ~= nil then
      EGroup_Single(eg_single, e_closest_fish)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_shore_fish, e_closest_fish)
    else
      print("Could not find fish to assign villager to")
    end
    
  end
  
  local function _AssignForester(gid, idx, sid)

    SGroup_Single(sg_single, sid)
    local entity_tree = EGroup_GetClosestEntity(eg_allWoodResources, Util_GetPosition(sid))
    if entity_tree ~= nil then
      EGroup_Single(eg_single, entity_tree)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_allWoodResources, entity_tree)
    else
      print("Could not find a tree to assign villager to")
    end
    
  end
  
  local function _AssignGoldminer(gid, idx, sid)
    -- 每次提出一个组成员
    SGroup_Single(sg_single, sid)

    if EGroup_Exists("eg_gold_deposit") == false then
      eg_gold_deposit = EGroup_Create("eg_gold_deposit")
    else
      EGroup_Clear(eg_gold_deposit)
    end
    
    World_GetEntitiesNearPoint(localPlayer, eg_gold_deposit, Util_GetPosition(sid), 25, OT_Neutral)
    EGroup_Filter(eg_gold_deposit, BP_GetEntityBlueprint("resource_gold_deposit_small"), FILTER_KEEP)
    if EGroup_Count(eg_gold_deposit) == 0 then
      World_GetEntitiesNearPoint(localPlayer, eg_gold_deposit, Util_GetPosition(sid), 25, OT_Neutral)
      EGroup_Filter(eg_gold_deposit, BP_GetEntityBlueprint("resource_gold_deposit"), FILTER_KEEP)
    end 

    if eg_gold_deposit ~=nil then
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_gold_deposit, false)
      --EGroup_Clear(eg_gold_deposit)
    else
      print("没有匹配的金矿!")
    end
    
    
  end
  
  local function _AssignStoneminer(gid, idx, sid)
    SGroup_Single(sg_single, sid)
    LocalCommand_SquadEntity(player.id, sg_single, SCMD_Gather, eg_stone_deposit, false)
  end
  
  local function _AssignGatherer(gid, idx, sid)
    
    SGroup_Single(sg_single, sid)
    local e_closest_berry = EGroup_GetClosestEntity(eg_berry_bushes, Util_GetPosition(sid))
    if e_closest_berry ~= nil then
      EGroup_Single(eg_single, e_closest_berry)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_berry_bushes, e_closest_berry)
    else
      print("Could not find berries to assign villager to")
    end
    
  end
  
  local function _AssignHunter(gid, idx, sid)
    
    -- There are no more than 2 deer (alive) within 15 Meters of the drop off
    local eg_close_food_deposits = Misc_FindDepositsOfTypeCloseToPosition(RT_Food,
      Cardinal_ConvertTypeToEntityBlueprint("villager", localPlayer), 
      Squad_GetPosition(sid),
      120)
    
    local genericDeerBp = BP_GetSquadBlueprint("gaia_huntable_deer")
    local sg_deer = SGroup_CreateUnique("")
    
    
    if EGroup_Count(eg_close_food_deposits) ~= 0 then
      for i = 1, EGroup_Count(eg_close_food_deposits), 1 do
        local deposit = EGroup_GetEntityAt(eg_close_food_deposits, i) 
        local deposit_squad = Entity_GetSquad(deposit)
        if deposit_squad ~= nil then
          local squadBP = Squad_GetBlueprint(deposit_squad)
          if squadBP == genericDeerBp then
            SGroup_Add(sg_deer, deposit_squad)
          end
        end
      end
      EGroup_Clear(eg_close_food_deposits)
    end
    
    -- Assign!
    if SGroup_Count(sg_deer) > 0 then
      local sg_targetDeer = SGroup_CreateUnique("")

      SGroup_Single(sg_single, sid)
      local sacrificialDeer = SGroup_GetClosestSquad(sg_deer, Util_GetPosition(sid))
      if sacrificialDeer ~= nil then
        SGroup_Single(sg_targetDeer, sacrificialDeer)
        LocalCommand_SquadSquad(localPlayer, sg_single, SCMD_Gather, sg_targetDeer, false)
      end
    end
    
  end
  
  local function _AssignFishingboat(gid, idx, sid)
    
    SGroup_Single(sg_single, sid)
    local e_closest_fish = EGroup_GetClosestEntity(eg_deepwater_fish, Util_GetPosition(sid))
    if e_closest_fish ~= nil then
      EGroup_Single(eg_single, e_closest_fish)
      LocalCommand_SquadEntity(localPlayer, sg_single, SCMD_Gather, eg_single, false)
      EGroup_Remove(eg_deepwater_fish, e_closest_fish)
    else
      print("Could not find fish to assign villager to")
    end
    
  end
  
  -- For every sgroup
  --SGroup_ForEach(sg_player_farmer, _AssignFarmer)
  --SGroup_ForEach(sg_player_fisherman, _AssignFisherman)
  --SGroup_ForEach(sg_player_forester, _AssignForester)
  --SGroup_ForEach(sg_player_goldminer, _AssignGoldminer)
  --SGroup_ForEach(sg_player_stoneminer, _AssignStoneminer)
  --SGroup_ForEach(sg_player_gatherer, _AssignGatherer)
  --SGroup_ForEach(sg_player_hunter, _AssignHunter)
  --SGroup_ForEach(sg_player_fishingboat, _AssignFishingboat)
  
  for idx, player in pairs(PLAYERS) do
    --获取单个玩家
    localPlayer = World_GetPlayerAt(idx)
    
    --获取第一个城镇中心
    eg_player_entities = Player_GetEntities(localPlayer)
    EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
    local ent_town_center = EGroup_GetEntityAt(eg_player_entities, 1)
    local pos_town_center = Entity_GetPosition(ent_town_center)
    
    --民族类型
    local raceName = Player_GetRaceName(localPlayer)
    local prefixes = AGS_GLOBAL_SETTINGS.Prefixes
    local prefix = prefixes[raceName]
    
    if EGroup_Exists("eg_gold_deposit") == false then
      eg_gold_deposit = EGroup_Create("eg_gold_deposit")
    else
      EGroup_Clear(eg_gold_deposit)
    end
    
    
    
    -- 查找周边金矿类型(先查小金，不存在则找大金)
    local gold_type = 'small'
    World_GetEntitiesNearPoint(localPlayer, eg_gold_deposit, pos_town_center, 60, OT_Neutral)
    EGroup_Filter(eg_gold_deposit, BP_GetEntityBlueprint("resource_gold_deposit_small"), FILTER_KEEP)
    
    if EGroup_Count(eg_gold_deposit) == 0 then
      World_GetEntitiesNearPoint(localPlayer, eg_gold_deposit, pos_town_center, 60, OT_Neutral)
      EGroup_Filter(eg_gold_deposit, BP_GetEntityBlueprint("resource_gold_deposit"), FILTER_KEEP)
      gold_type = 'big'
    end
	
	-- 如果还是没有，补木头和两个农民给玩家
	if EGroup_Count(eg_gold_deposit) == 0 then
	  
	  return
	end
		
    
	-- 最近的单个金矿
    local eg_gold_single = EGroup_GetEntityAt(eg_gold_deposit, 1)
	-- 这个金矿对应的坐标
    local gold_position = Entity_GetPosition(eg_gold_single)
    
    -- 设置偏移
	-- 默认小金+标准矿场
    local pos_minecamp = Util_GetPositionFromAtoB(gold_position,pos_town_center,10)
		
	if gold_type == 'big' then
    	pos_minecamp = Util_GetPositionFromAtoB(gold_position,pos_town_center,15)
    end
		
    if prefix == 'jpn' then
      pos_minecamp = Util_GetPositionFromAtoB(gold_position,pos_town_center,15)
		if gold_type == 'big' then
    		pos_minecamp = Util_GetPositionFromAtoB(gold_position,pos_town_center,20)
    	end
    end
		
	--local offset = 10.625
		
	--if gold_type == 'big' then
      --offset = 16.25
    --end
		
    --if prefix == 'jpn' and gold_type == 'small' then
      --offset = 10.625
    --end
    
    --if gold_type == 'big' and prefix == 'jpn' then
      --offset = 13.125
    --end
    
    
    --小金 日本多一格  大金 普通多
    --貌似是offset 和 offset_type 不会变
    --动态匹配偏移类型
    --local offset_type = OFFSET_FRONT
    --for i=1,4,1 do
      ----创建金矿周边资源的eg
      --if EGroup_Exists("eg_netural") == false then
        --eg_netural = EGroup_Create("eg_netural")
      --end

      --if i == 1 then
        --offset_type = OFFSET_FRONT
      --elseif i == 2 then
        --offset_type = OFFSET_BACK
      --elseif i == 3 then
        --offset_type = OFFSET_LEFT
      --elseif i == 4 then
        --offset_type = OFFSET_RIGHT
      --end
      
      ----偏移后找半径为
      --World_GetNeutralEntitiesNearPoint(eg_netural, World_GetOffsetPosition(gold_position,gold_position,offset_type, offset), offset)
      
      ----筛选出除金矿外的实体
      --if gold_type == 'big' then
        --EGroup_Filter(eg_netural, BP_GetEntityBlueprint("resource_gold_deposit"), FILTER_REMOVE)
      --else
        --EGroup_Filter(eg_netural, BP_GetEntityBlueprint("resource_gold_deposit_small"), FILTER_REMOVE)
      --end
      
      --if EGroup_Count(eg_netural) <= 2 then
        --break
      --end
    --end
    
    
    
    --if prefix == 'jpn' then
      --fieldLocation = World_GetOffsetPosition(gold_position, Entity_GetHeading(eg_gold_single), offset_type, offset+5)
    --else
	-- 设置金矿的偏移坐标
    -- local fieldLocation = World_GetOffsetPosition(gold_position, Entity_GetHeading(eg_gold_single), offset_type, offset)
    --end
    
    local fieldShortName
      -- 根据民族类型找不同的蓝图
    if prefix == 'mal' or prefix == 'ott' or prefix == 'jpn' then
      fieldShortName = 'building_econ_mining_camp_'
    elseif prefix == 'mon' then
      fieldShortName = 'building_house_'  
    else
      fieldShortName ='building_econ_mining_camp_control_'
    end
		
    -- fieldLocation
    field = Entity_CreateFacing(BP_GetEntityBlueprint(fieldShortName..prefix), player.id, pos_minecamp, pos_town_center, true)

    
    Entity_ForceConstruct(field)
    Entity_SnapToGridAndGround(field, false) --false表示即时构建
    Entity_Spawn(field)
    
    --Entity_SetInvulnerableMinCap(entity, 1.0, 0.0)
    
    local sbp_villager = BP_GetSquadBlueprint("unit_villager_1_"..prefix)
    local sg_player_goldminer = SGroup_CreateIfNotFound("sg_player_goldminer")
    UnitEntry_DeploySquads(localPlayer, sg_player_goldminer, {{sbp = sbp_villager, numSquads = 2 }}, pos_minecamp)
    
    -- 获取玩家农民
    --eg_farms = Player_GetEntitiesFromType(localPlayer, "farm")
    
    SGroup_ForEach(sg_player_goldminer, _AssignGoldminer)

  end
end

function EGroup_GetClosestEntity(egroup, position)
  local closest_distance_sqr = 1000000000000
  local closest_entity = nil
  
  local _CheckEntity = function(gid, idx, eid)
    local entityPosition = Entity_GetPosition(eid)
    local distance_sqr = World_DistanceSquaredPointToPoint(entityPosition, position)
    
    if distance_sqr < closest_distance_sqr then
      closest_distance_sqr = distance_sqr
      closest_entity = eid
    end
    
  end
  EGroup_ForEach(egroup, _CheckEntity)
  
  return closest_entity
  
end
-- Initialize Additional Starting Units
function ChallengeMission_InitStartingUnits()
  
  -- Get unit blueprints
  local sbp_villager_rus = BP_GetSquadBlueprint("unit_villager_1_rus")
  --local sbp_fishingboat_rus = BP_GetSquadBlueprint("unit_naval_fishing_boat_2_rus")
  local sbp_tradecart_rus = BP_GetSquadBlueprint("unit_trade_cart_rus")
  local sbp_scout_rus = BP_GetSquadBlueprint("unit_scout_1_rus")
  
  --[[ PLAYER UNITS ]]--
  
  -- Create SGroups
  sg_player_farmer = SGroup_CreateIfNotFound("sg_player_farmer")
  sg_player_fisherman = SGroup_CreateIfNotFound("sg_player_fisherman")
  sg_player_forester = SGroup_CreateIfNotFound("sg_player_forester")
  sg_player_goldminer = SGroup_CreateIfNotFound("sg_player_goldminer")
  sg_player_stoneminer = SGroup_CreateIfNotFound("sg_player_stoneminer")
  --sg_player_gatherer = SGroup_CreateIfNotFound("sg_player_gatherer")
  sg_player_hunter = SGroup_CreateIfNotFound("sg_player_hunter")
  sg_player_deer = SGroup_CreateIfNotFound("sg_player_deer")
  sg_player_first_traders = SGroup_CreateIfNotFound("sg_player_first_traders")
  sg_player_second_traders = SGroup_CreateIfNotFound("sg_player_second_traders")
  --sg_player_fishingboat = SGroup_CreateIfNotFound("sg_player_fishingboat")
  
  -- Create EGroups
  eg_player_market = EGroup_CreateIfNotFound("eg_player_market")
  
  -- Spawn units
  UnitEntry_DeploySquads(localPlayer, sg_player_farmer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_first_farmer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_farmer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_second_farmer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_fisherman, {{sbp = sbp_villager_rus, numSquads = 1 }}, mkr_player_fisherman_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_forester, {{sbp = sbp_villager_rus, numSquads = 7 }}, mkr_player_forester_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_goldminer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_goldminer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_stoneminer, {{sbp = sbp_villager_rus, numSquads = 2 }}, mkr_player_stoneminer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_hunter, {{sbp = sbp_villager_rus, numSquads = 4 }}, mkr_player_hunter_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_deer, {{sbp = BP_GetSquadBlueprint("gaia_huntable_deer"), numSquads = 1 }}, mkr_player_deer_spawn)
  --UnitEntry_DeploySquads(localPlayer, sg_player_gatherer, {{sbp = sbp_villager_rus, numSquads = 3 }}, mkr_player_gatherer_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_first_traders, {{sbp = sbp_tradecart_rus, numSquads = 2, creator = eg_player_market}}, mkr_player_trader_spawn1)
  UnitEntry_DeploySquads(localPlayer, sg_player_second_traders, {{sbp = sbp_tradecart_rus, numSquads = 2, creator = eg_player_market}}, mkr_player_trader_spawn2)
  --UnitEntry_DeploySquads(localPlayer, sg_player_fishingboat, {{sbp = sbp_fishingboat_rus, numSquads = 1 }}, mkr_player_fishingboat_spawn)
  UnitEntry_DeploySquads(localPlayer, sg_player_startingscouts, {{sbp = sbp_scout_rus, numSquads = 1 }}, mkr_player_startingscout_spawn)
  
  -- Spawn minimap icons
  --Util_CreateEntities(nil, eg_minimap, BP_GetEntityBlueprint("gaia_deer_dummy_minimap_icon"), mkr_player_deer_spawn, 1, nil, true, true)
  
end


function AGS_Spawn_Setting()
  for i, player in pairs(PLAYERS) do
    if AI_IsAIPlayer(player.id) == true then
      if Player_IsAlive(player.id) == true then
        local raceName = Player_GetRaceName(player.id)
        local prefixes = AGS_GLOBAL_SETTINGS.Prefixes
  
        local prefix = prefixes[raceName]
      
        if prefix ~= nil then
          local marketShortName
          
          -- 根据民族类型找不同的蓝图
          if prefix == 'mal' or prefix == 'ott' or prefix == 'mon' or prefix == 'jpn' then
            marketShortName = 'building_econ_market_'
          else
            marketShortName = 'building_econ_market_control_'
          end
          
          local trade_carts = Player_GetEntityCountByUnitType(player.id,"trade_cart")
          local player_entities = Player_GetEntities(player.id)
          EGroup_Filter(player_entities, BP_GetEntityBlueprint(marketShortName..prefix) , FILTER_KEEP)
          
          if EGroup_IsEmpty(player_entities) ~= true then
            local market = EGroup_GetEntityAt(player_entities, 1)
            local sbp_trade_cart = BP_GetSquadBlueprint("unit_trade_cart_"..prefix)

            if trade_carts <= 25 then
              for s=1,(25-trade_carts) do
                --if s ~= 50-trade_carts then
                Entity_QueueProductionItemByPBG( market, PITEM_Spawn, sbp_trade_cart )
                --end
              end
            end
          end
          
        end
      end
    end
  end
end

function AGS_Spawn_Ram()
  for i, player in pairs(PLAYERS) do
    if AI_IsAIPlayer(player.id) == true then
      if Player_IsAlive(player.id) == true then
        local raceName = Player_GetRaceName(player.id)
        local prefixes = AGS_GLOBAL_SETTINGS.Prefixes
  
        local prefix = prefixes[raceName]
        local eg_player_entities = Player_GetEntities(player.id)
        EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
        local entity = EGroup_GetEntityAt(eg_player_entities, 1)
        local position = Entity_GetPosition(entity)
      
        if prefix ~= nil then
          
          --local marketShortName
          
          -- 根据民族类型找不同的蓝图
          --if prefix == 'mal' or prefix == 'ott' or prefix == 'mon' or prefix == 'jpn' then
            --marketShortName = 'building_econ_market_'
          --else
            --marketShortName ='building_econ_market_control_'
          --end
          
          --local player_entities = Player_GetEntities(player.id)
          --EGroup_Filter(player_entities, BP_GetEntityBlueprint(marketShortName..prefix) , FILTER_KEEP)
          
          --if EGroup_IsEmpty(player_entities) ~= true then 
            --local market = EGroup_GetEntityAt(player_entities, 1)
            --local position = Entity_GetPosition(market)
            local ram_num = Player_GetEntityCountByUnitType(player.id,"unit_ram_3_"..prefix)
            if ram_num <= 8 then
              local sbp_ram = BP_GetSquadBlueprint("unit_ram_3_"..prefix)
              Squad_CreateAndSpawnToward(sbp_ram,player.id,1,position,position)   
            end
            
          --end
          
        end
      end
    end
  end
end

